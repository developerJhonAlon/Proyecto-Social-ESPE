/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ec.edu.espe_innovativa.controller;

/*
import com.lowagie.text.PageSize;
import java.io.File;
import java.io.IOException;
import java.io.Serializable;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
 */
import ar.com.fdvs.dj.core.DynamicJasperHelper;
import ar.com.fdvs.dj.core.layout.ClassicLayoutManager;
import ar.com.fdvs.dj.domain.DynamicReport;
import ar.com.fdvs.dj.domain.Style;
import ar.com.fdvs.dj.domain.builders.ColumnBuilder;
import ar.com.fdvs.dj.domain.builders.DynamicReportBuilder;
import ar.com.fdvs.dj.domain.constants.Font;
import ar.com.fdvs.dj.domain.constants.HorizontalAlign;
import ar.com.fdvs.dj.domain.constants.VerticalAlign;
import ar.com.fdvs.dj.domain.entities.columns.AbstractColumn;
import com.lowagie.text.PageSize;
import com.lowagie.text.BadElementException;
import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.Rectangle;
import ec.edu.espe_ctt.saturno.entity.Stvcamp;
import ec.edu.espe_ctt.saturno.entity.Stvmajr;
import ec.edu.espe_ctt.saturno.entity.Stvsubj;
import ec.edu.espe_ctt.saturno.session.StvcampFacade;
import ec.edu.espe_ctt.saturno.session.StvmajrFacade;
import ec.edu.espe_ctt.saturno.session.StvsubjFacade;
import ec.edu.espe_ctt.seguridades.entity.SegUsuario;
import ec.edu.espe_ctt.vinculacion.entity.AspectoEvaluacionFinal;
import ec.edu.espe_ctt.vinculacion.entity.ConfiguracionParametrosEvaluacion;
import ec.edu.espe_ctt.vinculacion.entity.DetalleEvaluacionFinalProyecto;
import ec.edu.espe_ctt.vinculacion.entity.EvaluacionFinalProyecto;
import ec.edu.espe_ctt.vinculacion.entity.ParametroEvaluacion;
import ec.edu.espe_ctt.vinculacion.entity.ParametroEvaluacionFinalCabecera;
import ec.edu.espe_ctt.vinculacion.entity.Programa;
import ec.edu.espe_ctt.vinculacion.entity.Proyecto;
import ec.edu.espe_ctt.vinculacion.entity.ObjetivoPrograma;
import ec.edu.espe_ctt.vinculacion.entity.ResponsableProyecto;
import ec.edu.espe_ctt.vinculacion.entity.TipoResponsable;
import ec.edu.espe_ctt.vinculacion.entity.ValoracionParametroEvaluacion;
import ec.edu.espe_ctt.vinculacion.session.ConfiguracionParametrosEvaluacionFacade;
import ec.edu.espe_ctt.vinculacion.session.ProgramaFacade;
import ec.edu.espe_ctt.vinculacion.session.ProyectoFacade;
import ec.edu.espe_ctt.vinculacion.session.ResponsableProyectoFacade;
import ec.edu.espe_ctt_investigacion.entity.SeaCanton;
import ec.edu.espe_ctt_investigacion.entity.SeaParroquia;
import ec.edu.espe_ctt_investigacion.entity.SeaProvincia;
import ec.edu.espe_ctt_investigacion.session.SeaProvinciaFacade;
import ec.edu.espe_innovativa.util.DynamicColumnDataSource;
import ec.edu.espe_innovativa.util.DynamicReportBuilder2;
import ec.edu.espe_innovativa.util.FacesUtils;
import ec.edu.espe_innovativa.util.JasperReportUtil;
import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import org.primefaces.event.NodeSelectEvent;
import org.primefaces.model.DefaultTreeNode;
import org.primefaces.model.TreeNode;

/**
 *
 * @author Administrador
 */
@ManagedBean
@ViewScoped
public class ReportesController implements Serializable {

    private TreeNode opcionesMenu;
    private TreeNode opcionMenuSelected;
    private List<ConfiguracionParametrosEvaluacion> configuracionParametrosEvaluacionList;
    @EJB
    private ConfiguracionParametrosEvaluacionFacade configuracionParametrosEvaluacionFacade;
    @EJB
    private StvsubjFacade departamentoFacade;

    @EJB
    private ProgramaFacade programaFacade;

    @EJB
    private StvmajrFacade carrerasFacade;
    @EJB
    private StvcampFacade sedesFacade;
    @EJB
    private SeaProvinciaFacade provinciasFacade;

    private ConfiguracionParametrosEvaluacion configuracionParametrosEvaluacionSelected;
    private List<Stvsubj> departamentos;
    private List<Programa> programas;
    private List<Stvmajr> carreras;
    private List<Stvcamp> sedes;
    private List<SeaProvincia> provincias;

    private Date fechaDesde;
    private Date fechaHasta;
    private String codigoDepartamento;
    private String codigoCarrera;
    private Integer codigoPrograma;
    private String codigoSede;
    private String codigoReporte;

    public ReportesController() {
    }

    @PostConstruct
    public void init() {
        /*this.codigoCarrera = "";
        this.codigoDepartamento = "";
        this.codigoPrograma = 0;
        this.codigoSede = "";
        this.codigoReporte = "1";*/
        this.departamentos = departamentoFacade.findAll();
        this.programas = programaFacade.findXEstado("");
        this.carreras = carrerasFacade.findAll();
        this.sedes = sedesFacade.findAll();
        this.provincias = provinciasFacade.findAll();
        inicializarOpcionesMenu();
    }

    public ConfiguracionParametrosEvaluacion getConfiguracionParametrosEvaluacionSelected() {
        return configuracionParametrosEvaluacionSelected;
    }

    public void setConfiguracionParametrosEvaluacionSelected(ConfiguracionParametrosEvaluacion ConfiguracionParametrosEvaluacionSelected) {
        this.configuracionParametrosEvaluacionSelected = ConfiguracionParametrosEvaluacionSelected;
    }

    public List<ConfiguracionParametrosEvaluacion> getConfiguracionParametrosEvaluacionList() {
        return configuracionParametrosEvaluacionList;
    }

    public void setConfiguracionParametrosEvaluacionList(List<ConfiguracionParametrosEvaluacion> configuracionParametrosEvaluacionList) {
        this.configuracionParametrosEvaluacionList = configuracionParametrosEvaluacionList;
    }

    public TreeNode getOpcionesMenu() {
        return opcionesMenu;
    }

    public void setOpcionesMenu(TreeNode opcionesMenu) {
        this.opcionesMenu = opcionesMenu;
    }

    public TreeNode getOpcionMenuSelected() {
        return opcionMenuSelected;
    }

    public void setOpcionMenuSelected(TreeNode opcionMenuSelected) {
        this.opcionMenuSelected = opcionMenuSelected;
    }

    public String getOpcionMenuCodeSelected() {
        if (opcionMenuSelected != null) {
            return ((OpcionMenu) opcionMenuSelected.getData()).getCodigo();
        } else {
            return "";
        }
    }

    @EJB
    private ProyectoFacade proyectoFacade;

    public void inicializarOpcionesMenu() {
        opcionesMenu = new DefaultTreeNode("Root", null);
        TreeNode node1 = new DefaultTreeNode(new OpcionMenu("1", "1. Proyectos pendientes de evaluación por Consejo Académico"), opcionesMenu);
        TreeNode node2 = new DefaultTreeNode(new OpcionMenu("2", "2. Proyectos aprobados por Comisión de Evaluación"), opcionesMenu);
        TreeNode node3 = new DefaultTreeNode(new OpcionMenu("3", "3. Reportes Generales Programas"), opcionesMenu);
        TreeNode node4 = new DefaultTreeNode(new OpcionMenu("4", "4. Reportes Generales Proyectos"), opcionesMenu);
    }

    public void onMenuSelect(NodeSelectEvent event) {
        initVariables();
        OpcionMenu opcionMenu = (OpcionMenu) opcionMenuSelected.getData();

        switch (opcionMenu.getCodigo()) {
            case "1":
                generarReporteProyAprobacionConsejoAcadémico();
                break;
            case "2":
                initReporteProyAprobadosComisionEvaluacion();
                break;
            case "4":
                initReporteProyectos();
        }
    }

    private void initVariables() {
        estado = "";
        provincia = null;
        canton = null;
        parroquia = null;
        codigoCarrera = null;
        codigoDepartamento = null;
        codigoPrograma = null;
        codigoSede = null;
        fechaDesde = null;
        fechaHasta = null;
        codigoReporte = "1";
    }

    private List<Proyecto> proyectoList;

    public List<Proyecto> getProyectoList() {
        return proyectoList;
    }

    public void setProyectoList(List<Proyecto> proyectoList) {
        this.proyectoList = proyectoList;
    }

    private List<String> cols;
    private List<ValoracionParametroEvaluacion> cols2;

    public List<ValoracionParametroEvaluacion> getCols2() {
        return cols2;
    }

    public void setCols2(List<ValoracionParametroEvaluacion> cols2) {
        this.cols2 = cols2;
    }

    public void setCols(List<String> cols) {
        this.cols = cols;
    }

    public List<String> getCols() {
        /*List<String> cols = new ArrayList<>();
         if (proyectoList!=null && !proyectoList.isEmpty()){
         for (ParametroEvaluacion par : proyectoList.get(0).getConfiguracionParametrosEvaluacion().getParametroEvaluacionList()) {
         cols.add(par.getDescripcion());
         }
         }
         cols.add("TOTAL");*/
        return cols;
    }

    private Map<String, Integer> colsSpan;

    public void setColsSpan(Map<String, Integer> colsSpan) {
        this.colsSpan = colsSpan;
    }

    public Map<String, Integer> getColsSpan() {
        /*Map<String, Integer> m= new HashMap<>();
         for (String col : getCols()) {
         m.put(col, 3);
         }*/
        return colsSpan;
    }
    private Integer colspanParametrosEvaluacion;

    public void setColspanParametrosEvaluacion(Integer colspanParametrosEvaluacion) {
        this.colspanParametrosEvaluacion = colspanParametrosEvaluacion;
    }

    public Integer getColspanParametrosEvaluacion() {
        /*int cont = 0;
        if (configuracionParametrosEvaluacionSelected == null) {
            return 0;
        }
        for (ParametroEvaluacion par : configuracionParametrosEvaluacionSelected.getParametroEvaluacionList()) {
            cont = cont + par.getValoracionList().size();
        }
        return cont + 1;*/
        return colspanParametrosEvaluacion;
    }

    public void generarReporteProyAprobadosComisionEvaluacion() {
        proyectoList = proyectoFacade.findByEstadoAprobadoComisionVinculacion(estado);
        colsSpan = new HashMap<>();
        cols = new ArrayList<>();
        cols2 = new ArrayList<>();
        colspanParametrosEvaluacion = 0;
        if (proyectoList != null && !proyectoList.isEmpty()) {
            for (ParametroEvaluacion par : proyectoList.get(0).getConfiguracionParametrosEvaluacion().getParametroEvaluacionList()) {
                cols.add(par.getDescripcion());
                colsSpan.put(par.getDescripcion(), par.getValoracionList().size());
                colspanParametrosEvaluacion = colspanParametrosEvaluacion + par.getValoracionList().size();
                for (ValoracionParametroEvaluacion val : par.getValoracionList()) {
                    cols2.add(val);
                }
            }
        }
        colspanParametrosEvaluacion = colspanParametrosEvaluacion + 3;
        //cols.add("TOTAL");
    }

    public void initReporteProyAprobadosComisionEvaluacion() {
        configuracionParametrosEvaluacionList = configuracionParametrosEvaluacionFacade.findXProyAprobadoComisionVinculacion();
        if (!configuracionParametrosEvaluacionList.isEmpty()) {
            configuracionParametrosEvaluacionSelected = configuracionParametrosEvaluacionList.get(0);
        }
    }

    public String generarReporteProyAprobacionConsejoAcadémico() {
        proyectoList = proyectoFacade.findByPorAutorizarConsejoAcadémico();
        return "";
    }

//<editor-fold defaultstate="collapsed" desc="Reportes de Programas">
    public Date getFechaDesde() {
        return fechaDesde;
    }

    public void setFechaDesde(Date fechaDesde) {
        this.fechaDesde = fechaDesde;
    }

    public Date getFechaHasta() {
        return fechaHasta;
    }

    public void setFechaHasta(Date fechaHasta) {
        this.fechaHasta = fechaHasta;
    }

    public String getCodigoDepartamento() {
        return codigoDepartamento;
    }

    public void setCodigoDepartamento(String codigoDepartamento) {
        this.codigoDepartamento = codigoDepartamento;
    }

    public String getCodigoCarrera() {
        return codigoCarrera;
    }

    public void setCodigoCarrera(String codigoCarrera) {
        this.codigoCarrera = codigoCarrera;
    }

    public Integer getCodigoPrograma() {
        return codigoPrograma;
    }

    public void setCodigoPrograma(Integer codigoPrograma) {
        this.codigoPrograma = codigoPrograma;
    }

    public String getCodigoSede() {
        return codigoSede;
    }

    public void setCodigoSede(String codigoSede) {
        this.codigoSede = codigoSede;
    }

    public List<Stvsubj> getDepartamentos() {
        return departamentos;
    }

    public void setDepartamentos(List<Stvsubj> departamentos) {
        this.departamentos = departamentos;
    }

    public List<Programa> getProgramas() {
        return programas;
    }

    public void setProgramas(List<Programa> programas) {
        this.programas = programas;
    }

    public List<Stvmajr> getCarrerasPrograma() {
        return carreras;
    }

    public void setCarrerasPrograma(List<Stvmajr> carrerasPrograma) {
        this.carreras = carrerasPrograma;
    }

    public List<Stvmajr> getCarreras() {
        return carreras;
    }

    public void setCarreras(List<Stvmajr> carreras) {
        this.carreras = carreras;
    }

    public List<Stvcamp> getSedes() {
        return sedes;
    }

    public void setSedes(List<Stvcamp> sedes) {
        this.sedes = sedes;
    }

    public List<SeaProvincia> getProvincias() {
        return provincias;
    }

    public void setProvincias(List<SeaProvincia> provincias) {
        this.provincias = provincias;
    }

    public String getCodigoReporte() {
        return codigoReporte;
    }

    public void setCodigoReporte(String codigoReporte) {
        this.codigoReporte = codigoReporte;
    }

    private String estado;

    public String getEstado() {
        return estado;
    }

    public void setEstado(String estado) {
        this.estado = estado;
    }

    private SeaProvincia provincia;
    private SeaCanton canton;
    private SeaParroquia parroquia;

    public SeaProvincia getProvincia() {
        return provincia;
    }

    public void setProvincia(SeaProvincia provincia) {
        this.provincia = provincia;
    }

    public SeaCanton getCanton() {
        return canton;
    }

    public void setCanton(SeaCanton canton) {
        this.canton = canton;
    }

    public SeaParroquia getParroquia() {
        return parroquia;
    }

    public void setParroquia(SeaParroquia parroquia) {
        this.parroquia = parroquia;
    }

    public void seleccionarProvincia() {
        canton = null;
        parroquia = null;
    }

    public void generarReporteProgramas(String tipo) {
        if (this.codigoReporte.equals("1")) {
            generarReporteProgramasAnio(tipo);
        } else if (this.codigoReporte.equals("2")) {
            generarReporteAvancePrograma(tipo);
        } else if (this.codigoReporte.equals("3")) {
            generarReporteEvaluacionPrograma(tipo);
        } else if (this.codigoReporte.equals("4")) {
            generarReporteResultadosPrograma(tipo);
        }
    }

    private void generarReporteProgramasAnio(String tipoReporte) {
        try {
            //prepararParametrosProgramas();
            programaList = programaFacade.findXCampos(fechaDesde, fechaHasta, codigoPrograma, estado, codigoCarrera, codigoDepartamento, provincia, canton, parroquia, codigoSede);
            parametros = new HashMap<String, Object>();
            parametros.put("SUBREPORT_DIR", JasperReportUtil.PATH);//JasperReportUtil.PATHIMG);
            parametros.put("dirPhoto", JasperReportUtil.PATHIMG + "banner_SSD.png");//JasperReportUtil.PATHIMG);
            parametros.put("pathAplicacion", JasperReportUtil.PATH_APLICACION);
            JasperReportUtil jasperBean = (JasperReportUtil) FacesUtils.getManagedBean(JasperReportUtil.NOMBRE_BEAN);
            jasperBean.generarReporte(JasperReportUtil.PATH_REPORTE_PROGRAMA_ANIO, tipoReporte.equals("PDF") ? JasperReportUtil.TIPO_PDF : (tipoReporte.equals("XLS") ? JasperReportUtil.TIPO_XLS : JasperReportUtil.TIPO_WORD), parametros, programaList);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void generarReporteAvancePrograma(String tipoReporte) {
        try {
            prepararParametrosProgramas();
            JasperReportUtil jasperBean = (JasperReportUtil) FacesUtils.getManagedBean(JasperReportUtil.NOMBRE_BEAN);
            jasperBean.generarReporte(JasperReportUtil.PATH_REPORTE_AVANCE_PROGRAMA, tipoReporte.equals("PDF") ? JasperReportUtil.TIPO_PDF : (tipoReporte.equals("XLS") ? JasperReportUtil.TIPO_XLS : JasperReportUtil.TIPO_WORD), parametros);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void generarReporteEvaluacionPrograma(String tipoReporte) {
        try {
            generarReporteEvaluacionPrograma();
            parametros = new HashMap<String, Object>();
            parametros.put("SUBREPORT_DIR", JasperReportUtil.PATH);//JasperReportUtil.PATHIMG);
            parametros.put("dirPhoto", JasperReportUtil.PATHIMG + "banner_SSD.png");//JasperReportUtil.PATHIMG);
            parametros.put("pathAplicacion", JasperReportUtil.PATH_APLICACION);
            JasperReportUtil jasperBean = (JasperReportUtil) FacesUtils.getManagedBean(JasperReportUtil.NOMBRE_BEAN);
            jasperBean.generarReporte(JasperReportUtil.PATH_REPORTE_EVALUACION_PROGRAMA, tipoReporte.equals("PDF") ? JasperReportUtil.TIPO_PDF : (tipoReporte.equals("XLS") ? JasperReportUtil.TIPO_XLS : JasperReportUtil.TIPO_WORD), parametros, programaList);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void generarReporteResultadosPrograma(String tipoReporte) {
        try {
            programaList = programaFacade.findXCampos(fechaDesde, fechaHasta, codigoPrograma, estado, codigoCarrera, codigoDepartamento, provincia, canton, parroquia, codigoSede);
            parametros = new HashMap<String, Object>();
            parametros.put("SUBREPORT_DIR", JasperReportUtil.PATH);//JasperReportUtil.PATHIMG);
            parametros.put("dirPhoto", JasperReportUtil.PATHIMG + "banner_SSD.png");//JasperReportUtil.PATHIMG);
            parametros.put("pathAplicacion", JasperReportUtil.PATH_APLICACION);
            JasperReportUtil jasperBean = (JasperReportUtil) FacesUtils.getManagedBean(JasperReportUtil.NOMBRE_BEAN);
            jasperBean.generarReporte(JasperReportUtil.PATH_REPORTE_RESULTADOS_PROGRAMA, tipoReporte.equals("PDF") ? JasperReportUtil.TIPO_PDF : (tipoReporte.equals("XLS") ? JasperReportUtil.TIPO_XLS : JasperReportUtil.TIPO_WORD), parametros, programaList);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    List<Programa> programaList;

    private void generarReporteEvaluacionPrograma() {
        programaList = programaFacade.findXCampos(fechaDesde, fechaHasta, codigoPrograma, estado, codigoCarrera, codigoDepartamento, provincia, canton, parroquia, codigoSede);
        for (Programa prog : programaList) {
            for (Proyecto proy : prog.getProyectoActivoList()) {
                if (proy.getEvaluacionFinal() == null) {
                    proy.addEvaluacionFinal(new EvaluacionFinalProyecto());
                }
                if (proy.getConfiguracionParametrosEvaluacionFinal() == null) {
                    proy.setConfiguracionParametrosEvaluacionFinal(configuracionParametrosEvaluacionFacade.findXEvaluacionFinalAndActivo());
                }
                if (proy.getConfiguracionParametrosEvaluacionFinal() != null) {
                    for (ParametroEvaluacionFinalCabecera cab : proy.getConfiguracionParametrosEvaluacionFinal().getParametroEvaluacionFinalCabeceraList()) {
                        if (cab.getTipo().equals(ParametroEvaluacionFinalCabecera.TIPO_ANALISIS_EFICACIA)) {
                            for (ObjetivoPrograma obj : proy.getObjetivoProyectoPadreList()) {
                                if (obj.getSvopTipo().equals(ObjetivoPrograma.TIPO_FIN)) {
                                    cab.addParametro(crearParametroEvaluacionMatrizMarcoLogico(obj));
                                } else if (obj.getSvopTipo().equals(ObjetivoPrograma.TIPO_PROPOSITO)) {
                                    cab.addParametro(crearParametroEvaluacionMatrizMarcoLogico(obj));
                                    for (ObjetivoPrograma comp : obj.getSvinObjetivoHijoList()) {
                                        cab.addParametro(crearParametroEvaluacionMatrizMarcoLogico(comp));
                                        for (ObjetivoPrograma act : comp.getSvinObjetivoHijoList()) {
                                            cab.addParametro(crearParametroEvaluacionMatrizMarcoLogico(act));
                                        }
                                    }
                                }
                            }
                        }
                        ParametroEvaluacion parametroEliminar = null;
                        for (ParametroEvaluacion par : cab.getParametroEvaluacionList()) {
                            if (cab.getTipo().equals(ParametroEvaluacionFinalCabecera.TIPO_ANALISIS_EFICIENCIA)
                                    && proy.getTipo().equals(Proyecto.TIPO_GASTO_PERMANENTE)
                                    && par.getIdAspectoEvaluacion() != null
                                    && par.getIdAspectoEvaluacion().equals(AspectoEvaluacionFinal.TIPO_PRESUPUESTO_UNIVERSIDAD)) {
                                parametroEliminar = par;
                            }
                            par.setProyecto(proy);
                            if (proy.getEvaluacionFinal().getId() != null) {
                                if (!cab.getTipo().equals(ParametroEvaluacionFinalCabecera.TIPO_ANALISIS_EFICACIA)) {
                                    for (DetalleEvaluacionFinalProyecto det : proy.getEvaluacionFinal().getDetalleEvaluacionFinalProyectoList()) {
                                        if (det.getValoracionParametroEvaluacion().getParametroEvaluacion().equals(par)) {
                                            par.setValoracionParametroEvaluacion(det.getValoracionParametroEvaluacion());
                                            par.setRespuestaInfoAdicional(det.getInfoAdicional());
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        if (parametroEliminar != null) {
                            cab.removeParametro(parametroEliminar);
                        }
                    }
                    proy.getConfiguracionParametrosEvaluacionFinal().initValoracion();
                }

            }
        }
    }

    private ParametroEvaluacion crearParametroEvaluacionMatrizMarcoLogico(ObjetivoPrograma obj) {
        ParametroEvaluacion par = new ParametroEvaluacion();
        par.setIdAspectoEvaluacion(AspectoEvaluacionFinal.TIPO_MATRIZ_MARCO_LOGICO);
        par.setObjetivoPrograma(obj);
        if (obj.getSvopTipo().equals(ObjetivoPrograma.TIPO_FIN)) {
            par.setDescripcion("FIN: " + obj.getSvopObjetivoProy());
        } else if (obj.getSvopTipo().equals(ObjetivoPrograma.TIPO_PROPOSITO)) {
            par.setDescripcion("OBJETIVO GENERAL: " + obj.getSvopObjetivoProy());
        } else if (obj.getSvopTipo().equals(ObjetivoPrograma.TIPO_COMPONENTE)) {
            par.setDescripcion("COMPONENTE: " + obj.getSvopObjetivoProy());
        } else {
            par.setDescripcion("ACTIVIDAD: " + obj.getSvopObjetivoProy());
        }

        for (int i = 0; i <= 5; i++) {
            ValoracionParametroEvaluacion val = new ValoracionParametroEvaluacion();
            val.setId(i);
            val.setDescripcion(String.valueOf(i));
            val.setPuntaje(i);
            par.addValoracion(val);
        }
        return par;
    }
    private Map<String, Object> parametros;

    private void prepararParametrosProgramas() {
        parametros = new HashMap<String, Object>();
        parametros.put("pathAplicacion", JasperReportUtil.PATH_APLICACION);
        //parametros.put("as_hclinica", this.turnoSeleccionado.getDpaHclinica().getDpaHclinica());
        //parametros.put("simbologia", JasperReportUtil.PATHSIMBOLOGIA);
        //parametros.put("PATH", JasperReportUtil.PATH);
        parametros.put("SUBREPORT_DIR", JasperReportUtil.PATH);//JasperReportUtil.PATHIMG);
        parametros.put("dirPhoto", JasperReportUtil.PATHIMG + "banner_SSD.png");//JasperReportUtil.PATHIMG);
        if (codigoDepartamento == null) {
            parametros.put("codigoDepartamento", "");
        } else {
            parametros.put("codigoDepartamento", this.codigoDepartamento);
        }
        if (codigoCarrera == null) {
            parametros.put("codigoCarrera", "");
        } else {
            parametros.put("codigoCarrera", this.codigoCarrera);
        }
        parametros.put("fechaDesde", this.fechaDesde);
        parametros.put("fechaHasta", this.fechaHasta);
        if (codigoSede == null) {
            parametros.put("codigoSede", "");
        } else {
            parametros.put("codigoSede", this.codigoSede);
        }
        if (this.codigoPrograma == null || this.codigoPrograma == -1) {
            parametros.put("codigoPrograma", null);
        } else {
            parametros.put("codigoPrograma", this.codigoPrograma);
        }
        if (estado == null) {
            parametros.put("estado", "");
        } else {
            parametros.put("estado", this.estado);
        }
        if (provincia == null) {
            parametros.put("codigoProvincia", "");
        } else {
            parametros.put("codigoProvincia", this.provincia.getProId());
        }
        if (canton == null) {
            parametros.put("codigoCanton", "");
        } else {
            parametros.put("codigoCanton", this.canton.getCanId());
        }
        if (parroquia == null) {
            parametros.put("codigoParroquia", "");
        } else {
            parametros.put("codigoParroquia", this.parroquia.getPrqId());
        }
        //parametros.put("PATH_IMG_1", JasperReportUtil.PATHIMG);
    }

//</editor-fold>
//<editor-fold defaultstate="collapsed" desc="Reportes de Proyectos"> 
    public void generarReporteProyectos(String tipo) {
        if (this.codigoReporte.equals("1")) {
            generarReporteAprobacionProyectos(tipo);
        } else if (this.codigoReporte.equals("2")) {
            generarReporteProyectosEjecutados(tipo);
        } else if (this.codigoReporte.equals("3")) {
            generarReporteDocentesProyectos(tipo);
        } else if (this.codigoReporte.equals("4")) {
            generarReporteEstudiantesProyectos(tipo);
        } else if (this.codigoReporte.equals("5")) {
            generarReporteBeneficiariosProyectos(tipo);
        } else if (this.codigoReporte.equals("6")) {
            generarReportePresupuestoProyectos(tipo);
        } else if (this.codigoReporte.equals("7")) {
            generarReporteAvanceProyectos(tipo);
        } else if (this.codigoReporte.equals("8")) {
            generarReporteEvaluacionProyectos(tipo);
        } else if (this.codigoReporte.equals("9")) {
            generarReporteResultadosProyectos(tipo);
        } else if (this.codigoReporte.equals("10")) {
            generarReporteCertificadosProyectos(tipo);
        }
    }

    private void generarReporteProyectosEjecutados(String tipoReporte) {
        try {
            prepararParametrosReporteProyectos();
            JasperReportUtil jasperBean = (JasperReportUtil) FacesUtils.getManagedBean(JasperReportUtil.NOMBRE_BEAN);
            jasperBean.generarReporte(JasperReportUtil.PATH_REPORTE_PROYECTOS_EJECUTADOS, tipoReporte.equals("PDF") ? JasperReportUtil.TIPO_PDF : (tipoReporte.equals("XLS") ? JasperReportUtil.TIPO_XLS : JasperReportUtil.TIPO_WORD), parametros);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void generarReporteAprobacionProyectos(String tipoReporte) {
        try {
            proyectoList = proyectoFacade.findByAprobadoComisionVinculacion(programa, codigoProyecto, tipoProyecto, codigoCarrera, codigoDepartamento, cobertura, provincia, canton, parroquia, codigoSede);
            parametros = new HashMap<String, Object>();
            parametros.put("SUBREPORT_DIR", JasperReportUtil.PATH);//JasperReportUtil.PATHIMG);
            parametros.put("dirPhoto", JasperReportUtil.PATHIMG + "banner_SSD.png");//JasperReportUtil.PATHIMG);
            parametros.put("pathAplicacion", JasperReportUtil.PATH_APLICACION);
            JasperReportUtil jasperBean = (JasperReportUtil) FacesUtils.getManagedBean(JasperReportUtil.NOMBRE_BEAN);
            jasperBean.generarReporte(JasperReportUtil.PATH_REPORTE_APROBACION_PROYECTO, tipoReporte.equals("PDF") ? JasperReportUtil.TIPO_PDF : (tipoReporte.equals("XLS") ? JasperReportUtil.TIPO_XLS : JasperReportUtil.TIPO_WORD), parametros, proyectoList);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private Programa programa;
    private Integer codigoProyecto;
    @EJB
    private ResponsableProyectoFacade responsableProyectoFacade;

    public Integer getCodigoProyecto() {
        return codigoProyecto;
    }

    public void setCodigoProyecto(Integer codigoProyecto) {
        this.codigoProyecto = codigoProyecto;
    }

    public Programa getPrograma() {
        return programa;
    }

    public void setPrograma(Programa programa) {
        this.programa = programa;
    }

    public void seleccionarCobertura() {
        provincia = null;
        canton = null;
        parroquia = null;
    }

    private List<SegUsuario> docenteList;
    private List<SegUsuario> estudianteList;
    private SegUsuario usuario;

    public List<SegUsuario> getEstudianteList() {
        return estudianteList;
    }

    public void setEstudianteList(List<SegUsuario> estudianteList) {
        this.estudianteList = estudianteList;
    }

    public SegUsuario getUsuario() {
        return usuario;
    }

    public void setUsuario(SegUsuario usuario) {
        this.usuario = usuario;
    }

    public List<SegUsuario> getDocenteList() {
        return docenteList;
    }

    public void setDocenteList(List<SegUsuario> docenteList) {
        this.docenteList = docenteList;
    }

    private void initReporteProyectos() {
        cobertura = 0;
        docenteList = responsableProyectoFacade.findDocenteParticipante(TipoResponsable.TIPO_PARTICIPANTE_DOCENTE);
        estudianteList = responsableProyectoFacade.findDocenteParticipante(TipoResponsable.TIPO_PARTICIPANTE_ESTUDIANTE);
    }

    private void prepararParametrosReporteProyectos() {
        parametros = new HashMap<String, Object>();
        parametros.put("pathAplicacion", JasperReportUtil.PATH_APLICACION);
        parametros.put("SUBREPORT_DIR", JasperReportUtil.PATH);//JasperReportUtil.PATHIMG);
        parametros.put("dirPhoto", JasperReportUtil.PATHIMG + "banner_SSD.png");//JasperReportUtil.PATHIMG);
        parametros.put("codigoDepartamento", codigoDepartamento == null ? "" : codigoDepartamento);
        parametros.put("codigoCarrera", codigoCarrera == null ? "" : codigoCarrera);
        parametros.put("fechaDesde", this.fechaDesde);
        parametros.put("fechaHasta", this.fechaHasta);
        parametros.put("codigoSede", codigoSede == null ? "" : codigoSede);
        parametros.put("codigoPrograma", codigoPrograma == null ? -1 : codigoPrograma);
        parametros.put("estado", estado == null ? "" : estado);
        parametros.put("codigoProvincia", provincia == null ? "" : provincia.getProId());
        parametros.put("codigoCanton", canton == null ? "" : canton.getCanId());
        parametros.put("codigoParroquia", parroquia == null ? "" : parroquia.getPrqId());
        parametros.put("tipoProyecto", tipoProyecto == null ? "" : tipoProyecto);
        parametros.put("cobertura", cobertura);

    }

    private String tipoProyecto;

    public String getTipoProyecto() {
        return tipoProyecto;
    }

    public void setTipoProyecto(String tipoProyecto) {
        this.tipoProyecto = tipoProyecto;
    }

    private Integer cobertura;

    public Integer getCobertura() {
        return cobertura;
    }

    public void setCobertura(Integer cobertura) {
        this.cobertura = cobertura;
    }

    private void generarReporteDocentesProyectos(String tipoReporte) {
        try {
            proyectoList = proyectoFacade.findXCampos(fechaDesde, fechaHasta, programa, codigoProyecto, tipoProyecto,
                    estado, codigoCarrera, codigoDepartamento, provincia, canton, parroquia, codigoSede, cobertura, usuario, null);
            parametros = new HashMap<String, Object>();
            parametros.put("SUBREPORT_DIR", JasperReportUtil.PATH);//JasperReportUtil.PATHIMG);
            parametros.put("dirPhoto", JasperReportUtil.PATHIMG + "banner_SSD.png");//JasperReportUtil.PATHIMG);
            parametros.put("pathAplicacion", JasperReportUtil.PATH_APLICACION);
            JasperReportUtil jasperBean = (JasperReportUtil) FacesUtils.getManagedBean(JasperReportUtil.NOMBRE_BEAN);
            jasperBean.generarReporte(JasperReportUtil.PATH_REPORTE_PARTICIPACION_DOCENTE, tipoReporte.equals("PDF") ? JasperReportUtil.TIPO_PDF : (tipoReporte.equals("XLS") ? JasperReportUtil.TIPO_XLS : JasperReportUtil.TIPO_WORD), parametros, proyectoList);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void generarReporteEstudiantesProyectos(String tipoReporte) {
        try {
            proyectoList = proyectoFacade.findXCampos(fechaDesde, fechaHasta, programa, codigoProyecto, tipoProyecto,
                    estado, codigoCarrera, codigoDepartamento, provincia, canton, parroquia, codigoSede, cobertura, null, usuario);
            parametros = new HashMap<String, Object>();
            parametros.put("SUBREPORT_DIR", JasperReportUtil.PATH);//JasperReportUtil.PATHIMG);
            parametros.put("dirPhoto", JasperReportUtil.PATHIMG + "banner_SSD.png");//JasperReportUtil.PATHIMG);
            parametros.put("pathAplicacion", JasperReportUtil.PATH_APLICACION);
            JasperReportUtil jasperBean = (JasperReportUtil) FacesUtils.getManagedBean(JasperReportUtil.NOMBRE_BEAN);
            jasperBean.generarReporte(JasperReportUtil.PATH_REPORTE_PARTICIPACION_ESTUDIANTE, tipoReporte.equals("PDF") ? JasperReportUtil.TIPO_PDF : (tipoReporte.equals("XLS") ? JasperReportUtil.TIPO_XLS : JasperReportUtil.TIPO_WORD), parametros, proyectoList);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void generarReporteBeneficiariosProyectos(String tipoReporte) {
        try {
            proyectoList = proyectoFacade.findXCampos(fechaDesde, fechaHasta, programa, codigoProyecto, tipoProyecto,
                    estado, codigoCarrera, codigoDepartamento, provincia, canton, parroquia, codigoSede, cobertura, null, null);
            parametros = new HashMap<String, Object>();
            parametros.put("SUBREPORT_DIR", JasperReportUtil.PATH);//JasperReportUtil.PATHIMG);
            parametros.put("dirPhoto", JasperReportUtil.PATHIMG + "banner_SSD.png");//JasperReportUtil.PATHIMG);
            parametros.put("pathAplicacion", JasperReportUtil.PATH_APLICACION);
            JasperReportUtil jasperBean = (JasperReportUtil) FacesUtils.getManagedBean(JasperReportUtil.NOMBRE_BEAN);
            jasperBean.generarReporte(JasperReportUtil.PATH_REPORTE_BENEFICIARIOS_PROYECTO, tipoReporte.equals("PDF") ? JasperReportUtil.TIPO_PDF : (tipoReporte.equals("XLS") ? JasperReportUtil.TIPO_XLS : JasperReportUtil.TIPO_WORD), parametros, proyectoList);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void generarReportePresupuestoProyectos(String tipoReporte) {
        try {
            proyectoList = proyectoFacade.findXCampos(fechaDesde, fechaHasta, programa, codigoProyecto, tipoProyecto,
                    estado, codigoCarrera, codigoDepartamento, provincia, canton, parroquia, codigoSede, cobertura, null, null);
            for (Proyecto proy : proyectoList) {
                proy.inicializarListadoPresupuestos();
            }

            parametros = new HashMap<String, Object>();
            parametros.put("SUBREPORT_DIR", JasperReportUtil.PATH);//JasperReportUtil.PATHIMG);
            parametros.put("dirPhoto", JasperReportUtil.PATHIMG + "banner_SSD.png");//JasperReportUtil.PATHIMG);
            parametros.put("pathAplicacion", JasperReportUtil.PATH_APLICACION);
            JasperReportUtil jasperBean = (JasperReportUtil) FacesUtils.getManagedBean(JasperReportUtil.NOMBRE_BEAN);
            jasperBean.generarReporte(JasperReportUtil.PATH_REPORTE_PRESUPUESTO_PROYECTO, tipoReporte.equals("PDF") ? JasperReportUtil.TIPO_PDF : (tipoReporte.equals("XLS") ? JasperReportUtil.TIPO_XLS : JasperReportUtil.TIPO_WORD), parametros, proyectoList);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void generarReporteAvanceProyectos(String tipoReporte) {
        try {
            proyectoList = proyectoFacade.findXCampos(fechaDesde, fechaHasta, programa, codigoProyecto, tipoProyecto,
                    estado, codigoCarrera, codigoDepartamento, provincia, canton, parroquia, codigoSede, cobertura, null, null);
            parametros = new HashMap<String, Object>();
            parametros.put("SUBREPORT_DIR", JasperReportUtil.PATH);//JasperReportUtil.PATHIMG);
            parametros.put("dirPhoto", JasperReportUtil.PATHIMG + "banner_SSD.png");//JasperReportUtil.PATHIMG);
            parametros.put("pathAplicacion", JasperReportUtil.PATH_APLICACION);
            JasperReportUtil jasperBean = (JasperReportUtil) FacesUtils.getManagedBean(JasperReportUtil.NOMBRE_BEAN);
            jasperBean.generarReporte(JasperReportUtil.PATH_REPORTE_AVANCE_PROYECTO, tipoReporte.equals("PDF") ? JasperReportUtil.TIPO_PDF : (tipoReporte.equals("XLS") ? JasperReportUtil.TIPO_XLS : JasperReportUtil.TIPO_WORD), parametros, proyectoList);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void generarReporteEvaluacionProyecto() {
        proyectoList = proyectoFacade.findXCampos(fechaDesde, fechaHasta, programa, codigoProyecto, tipoProyecto,
                estado, codigoCarrera, codigoDepartamento, provincia, canton, parroquia, codigoSede, cobertura, null, null);

        for (Proyecto proy : proyectoList) {
            if (proy.getEvaluacionFinal() == null) {
                proy.addEvaluacionFinal(new EvaluacionFinalProyecto());
            }
            if (proy.getConfiguracionParametrosEvaluacionFinal() == null) {
                proy.setConfiguracionParametrosEvaluacionFinal(configuracionParametrosEvaluacionFacade.findXEvaluacionFinalAndActivo());
            }
            if (proy.getConfiguracionParametrosEvaluacionFinal() != null) {
                for (ParametroEvaluacionFinalCabecera cab : proy.getConfiguracionParametrosEvaluacionFinal().getParametroEvaluacionFinalCabeceraList()) {
                    if (cab.getTipo().equals(ParametroEvaluacionFinalCabecera.TIPO_ANALISIS_EFICACIA)) {
                        for (ObjetivoPrograma obj : proy.getObjetivoProyectoPadreList()) {
                            if (obj.getSvopTipo().equals(ObjetivoPrograma.TIPO_FIN)) {
                                cab.addParametro(crearParametroEvaluacionMatrizMarcoLogico(obj));
                            } else if (obj.getSvopTipo().equals(ObjetivoPrograma.TIPO_PROPOSITO)) {
                                cab.addParametro(crearParametroEvaluacionMatrizMarcoLogico(obj));
                                for (ObjetivoPrograma comp : obj.getSvinObjetivoHijoList()) {
                                    cab.addParametro(crearParametroEvaluacionMatrizMarcoLogico(comp));
                                    for (ObjetivoPrograma act : comp.getSvinObjetivoHijoList()) {
                                        cab.addParametro(crearParametroEvaluacionMatrizMarcoLogico(act));
                                    }
                                }
                            }
                        }
                    }
                    ParametroEvaluacion parametroEliminar = null;
                    for (ParametroEvaluacion par : cab.getParametroEvaluacionList()) {
                        if (cab.getTipo().equals(ParametroEvaluacionFinalCabecera.TIPO_ANALISIS_EFICIENCIA)
                                && proy.getTipo().equals(Proyecto.TIPO_GASTO_PERMANENTE)
                                && par.getIdAspectoEvaluacion() != null
                                && par.getIdAspectoEvaluacion().equals(AspectoEvaluacionFinal.TIPO_PRESUPUESTO_UNIVERSIDAD)) {
                            parametroEliminar = par;
                        }
                        par.setProyecto(proy);
                        if (proy.getEvaluacionFinal().getId() != null) {
                            if (!cab.getTipo().equals(ParametroEvaluacionFinalCabecera.TIPO_ANALISIS_EFICACIA)) {
                                for (DetalleEvaluacionFinalProyecto det : proy.getEvaluacionFinal().getDetalleEvaluacionFinalProyectoList()) {
                                    if (det.getValoracionParametroEvaluacion().getParametroEvaluacion().equals(par)) {
                                        par.setValoracionParametroEvaluacion(det.getValoracionParametroEvaluacion());
                                        par.setRespuestaInfoAdicional(det.getInfoAdicional());
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    if (parametroEliminar != null) {
                        cab.removeParametro(parametroEliminar);
                    }
                }
                proy.getConfiguracionParametrosEvaluacionFinal().initValoracion();
            }

        }
    }

    private void generarReporteEvaluacionProyectos(String tipoReporte) {
        try {
            generarReporteEvaluacionProyecto();
            parametros = new HashMap<String, Object>();
            parametros.put("SUBREPORT_DIR", JasperReportUtil.PATH);//JasperReportUtil.PATHIMG);
            parametros.put("dirPhoto", JasperReportUtil.PATHIMG + "banner_SSD.png");//JasperReportUtil.PATHIMG);
            parametros.put("pathAplicacion", JasperReportUtil.PATH_APLICACION);
            JasperReportUtil jasperBean = (JasperReportUtil) FacesUtils.getManagedBean(JasperReportUtil.NOMBRE_BEAN);
            jasperBean.generarReporte(JasperReportUtil.PATH_REPORTE_EVALUACION_PROYECTO, tipoReporte.equals("PDF") ? JasperReportUtil.TIPO_PDF : (tipoReporte.equals("XLS") ? JasperReportUtil.TIPO_XLS : JasperReportUtil.TIPO_WORD), parametros, proyectoList);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    private void generarReporteResultadosProyectos(String tipoReporte) {
        try {
            proyectoList = proyectoFacade.findXCampos(fechaDesde, fechaHasta, programa, codigoProyecto, tipoProyecto,
                    estado, codigoCarrera, codigoDepartamento, provincia, canton, parroquia, codigoSede, cobertura, null, null);
            parametros = new HashMap<String, Object>();
            parametros.put("SUBREPORT_DIR", JasperReportUtil.PATH);//JasperReportUtil.PATHIMG);
            parametros.put("dirPhoto", JasperReportUtil.PATHIMG + "banner_SSD.png");//JasperReportUtil.PATHIMG);
            parametros.put("pathAplicacion", JasperReportUtil.PATH_APLICACION);
            JasperReportUtil jasperBean = (JasperReportUtil) FacesUtils.getManagedBean(JasperReportUtil.NOMBRE_BEAN);
            jasperBean.generarReporte(JasperReportUtil.PATH_REPORTE_RESULTADOS_PROYECTO, tipoReporte.equals("PDF") ? JasperReportUtil.TIPO_PDF : (tipoReporte.equals("XLS") ? JasperReportUtil.TIPO_XLS : JasperReportUtil.TIPO_WORD), parametros, proyectoList);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }    
    private void generarReporteCertificadosProyectos(String tipoReporte) {
        try {
            proyectoList = proyectoFacade.findXCampos(fechaDesde, fechaHasta, programa, codigoProyecto, tipoProyecto,
                    estado, codigoCarrera, codigoDepartamento, provincia, canton, parroquia, codigoSede, cobertura, null, null);
            parametros = new HashMap<String, Object>();
            parametros.put("SUBREPORT_DIR", JasperReportUtil.PATH);//JasperReportUtil.PATHIMG);
            parametros.put("dirPhoto", JasperReportUtil.PATHIMG + "banner_SSD.png");//JasperReportUtil.PATHIMG);
            parametros.put("pathAplicacion", JasperReportUtil.PATH_APLICACION);
            JasperReportUtil jasperBean = (JasperReportUtil) FacesUtils.getManagedBean(JasperReportUtil.NOMBRE_BEAN);
            jasperBean.generarReporte(JasperReportUtil.PATH_REPORTE_CERTIFICADOS_PROYECTO, tipoReporte.equals("PDF") ? JasperReportUtil.TIPO_PDF : (tipoReporte.equals("XLS") ? JasperReportUtil.TIPO_XLS : JasperReportUtil.TIPO_WORD), parametros, proyectoList);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }        
    //</editor-fold>    

    /*public void dynamicJasper() {
        try {

            FastReportBuilder drb = new FastReportBuilder();
            DynamicReport dr = drb.addColumn("State", "state", String.class.getName(), 30)
                    .addColumn("Branch", "branch", String.class.getName(), 30)
                    .addColumn("Product Line", "productLine", String.class.getName(), 50)
                    .addColumn("Item", "item", String.class.getName(), 50)
                    .addColumn("Item Code", "id", Long.class.getName(), 30, true)
                    .addColumn("Quantity", "quantity", Long.class.getName(), 60, true)
                    .addColumn("Amount", "amount", Float.class.getName(), 70, true)
                    .addGroups(2)
                    .setTitle("November 2006 sales report")
                    .setSubtitle("This report was generated at " + new Date())
                    .setPrintBackgroundOnOddRows(true)
                    .setUseFullPageWidth(true)
                    .build();

            //JRDataSource ds = new JRBeanCollectionDataSource(TestRepositoryProducts.getDummyCollection());
            JasperPrint jp = DynamicJasperHelper.generateJasperPrint(dr, new ClassicLayoutManager(), ds);
            JasperViewer.viewReport(jp);    //finally display the report report
        } catch (Exception e) {
        }
    }
    
    
     */
    
    public void runReport(List<String> columnHeaders, List<List<String>> rows) throws JRException {

        System.out.println("Loading the .jrxml");
        //InputStream is = getClass().getResourceAsStream("../../../DynamicColumns.jrxml");
        InputStream is = getClass().getResourceAsStream("../../../../../../../web/jrxml/DynamicColumns.jrxml");
        //InputStream is = getClass().getResourceAsStream(JasperReportUtil.PATH_REPORTE_DINAMICO);
        JasperDesign jasperReportDesign = JRXmlLoader.load(is);

        System.out.println("Adding the dynamic columns");
        DynamicReportBuilder2 reportBuilder = new DynamicReportBuilder2(jasperReportDesign, columnHeaders.size());
        reportBuilder.addDynamicColumns();

        System.out.println("Compiling the report");
        JasperReport jasperReport = JasperCompileManager.compileReport(jasperReportDesign);

        Map<String, Object> params = new HashMap<String, Object>();
        params.put("REPORT_TITLE", "Sample Dynamic Columns Report");
        DynamicColumnDataSource pdfDataSource = new DynamicColumnDataSource(columnHeaders, rows);
        System.out.println("Filling the report");

        //jasperPrint = JasperFillManager.fillReport(jasperReport, params, pdfDataSource);

        //System.out.println("Exporting the report to pdf");
        //JasperExportManager.exportReportToPdfFile(jasperPrint, "/tmp/DynamicColumns.pdf");
        //JasperExportManager.exportReportToPdfFile(jasperPrint, "E:/temp/DynamicColumns.pdf");
    }

    protected JasperPrint jp;
    protected JasperReport jr;
    protected Map params = new HashMap();
    protected DynamicReport dr;

    protected JRDataSource getDataSource() {
// Generate dummy data to show in the report.
        List records = new ArrayList();
        for (int i = 1; i < 10; i++) {

            Map columns = new HashMap();
            for (int j = 1; j <= 10; j++) {
// The HashMap Key must save with ColumnProperty Name
                columns.put("Column" + j, "Record " + i + " Column " + j + " data.");
            }
            records.add(columns);
        }
        JRDataSource ds = new JRMapCollectionDataSource(records);
        return ds;
    }

    public void buildReport() throws Exception {
        params.put("ReportTitle1", "Report Title");
        DynamicReportBuilder drb = new DynamicReportBuilder();
        Font font = new Font(10, "Sarif", true);
        Style headerStyle = new Style();
        headerStyle.setFont(font);
        headerStyle.setHorizontalAlign(HorizontalAlign.LEFT);
        headerStyle.setVerticalAlign(VerticalAlign.MIDDLE);
        font = new Font(8, "Sarif", false);
        Style detailStyle = new Style();
        detailStyle.setFont(font);
        detailStyle.setHorizontalAlign(HorizontalAlign.LEFT);
        detailStyle.setVerticalAlign(VerticalAlign.MIDDLE);
        for (int i = 1; i <= 10; i++) {
            AbstractColumn column = ColumnBuilder.getInstance()
                    .setColumnProperty("Column" + i, String.class.getName())
                    .setTitle("Column " + i + " Title").setWidth(200)
                    .setStyle(detailStyle).setHeaderStyle(headerStyle).build();
            drb.addColumn(column);
        }
        drb.setUseFullPageWidth(true);
// Pass the JasperReport Template to DynamicJasper
        drb.setTemplateFile("C:/DynamicJasperTemplate.jrxml");
        DynamicReport dr = drb.build();
        JRDataSource ds = getDataSource();
        jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), params);
        if (ds != null) {
            jp = JasperFillManager.fillReport(jr, params, ds);
        } else {
            jp = JasperFillManager.fillReport(jr, params);
        }
        JasperExportManager.exportReportToPdfFile(jp, "C:/report-out.pdf");
    }

    public void preProcessPDF(Object document) throws IOException, BadElementException, DocumentException {
        Document pdf = (Document) document;
        pdf.open();
        pdf.setPageSize(PageSize.A0);
        pdf.setPageSize(new Rectangle(5000, 1000));

        ExternalContext externalContext = FacesContext.getCurrentInstance().getExternalContext();
        //String logo = externalContext.getRealPath("") + File.separator + "resources" + File.separator + "demo" + File.separator + "images" + File.separator + "prime_logo.png";

        //pdf.add(Image.getInstance(logo));
    }

}
