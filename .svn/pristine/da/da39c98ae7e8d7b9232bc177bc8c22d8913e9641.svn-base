/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ec.edu.espe_ctt.convocatoria.controller;

//<editor-fold defaultstate="collapsed" desc="Import">
import ec.edu.espe_ctt.saturno.entity.Stvmajr;
import ec.edu.espe_ctt.saturno.entity.Stvsubj;
import ec.edu.espe_ctt.saturno.session.StvmajrFacade;
import ec.edu.espe_ctt.saturno.session.StvsubjFacade;
import ec.edu.espe_ctt.seguridades.entity.SegUsuario;
import ec.edu.espe_ctt.seguridades.session.SegUsuarioFacade;
import ec.edu.espe_ctt.vinculacion.entity.AdquisicionProyecto;
import ec.edu.espe_ctt.vinculacion.entity.CarreraProyecto;
import ec.edu.espe_ctt.vinculacion.entity.Convocatoria;
import ec.edu.espe_ctt.vinculacion.entity.DepartamentoProyecto;
import ec.edu.espe_ctt.vinculacion.entity.HitoProyecto;
import ec.edu.espe_ctt.vinculacion.entity.PresupuestoProyecto;
import ec.edu.espe_ctt.vinculacion.entity.Proyecto;
import ec.edu.espe_ctt.vinculacion.entity.AvanceActividad;
import ec.edu.espe_ctt.vinculacion.entity.AvanceComponente;
import ec.edu.espe_ctt.vinculacion.entity.CalificacionProyecto;
import ec.edu.espe_ctt.vinculacion.entity.DetalleCalificacionProyecto;
import ec.edu.espe_ctt.vinculacion.entity.ParametroEvaluacion;
import ec.edu.espe_ctt.vinculacion.entity.SvinObjetivoBVivir;
import ec.edu.espe_ctt.vinculacion.entity.SvinObjetivoPrograma;
import ec.edu.espe_ctt.vinculacion.entity.SvinObjetivosEstraInsti;
import ec.edu.espe_ctt.vinculacion.entity.SvinProgObj;
import ec.edu.espe_ctt.vinculacion.entity.SvinProgObjEstrategicos;
import ec.edu.espe_ctt.vinculacion.entity.SvinProgramaV;
import ec.edu.espe_ctt.vinculacion.entity.SvinResponsableProg;
import ec.edu.espe_ctt.vinculacion.entity.SvinZonaDetalle;
import ec.edu.espe_ctt.vinculacion.entity.TipoPoblacionProyecto;
import ec.edu.espe_ctt.vinculacion.entity.TipoResponsable;
import ec.edu.espe_ctt.vinculacion.entity.VDocenteVinculacion;
import ec.edu.espe_ctt.vinculacion.entity.VDocenteVinculacion2;
import ec.edu.espe_ctt.vinculacion.session.AdquisicionProyectoFacade;
import ec.edu.espe_ctt.vinculacion.session.CarreraProyectoFacade;
import ec.edu.espe_ctt.vinculacion.session.ConvocatoriaFacade;
import ec.edu.espe_ctt.vinculacion.session.DepartamentoProyectoFacade;
import ec.edu.espe_ctt.vinculacion.session.HitoProyectoFacade;
import ec.edu.espe_ctt.vinculacion.session.ParametroEvaluacionFacade;
import ec.edu.espe_ctt.vinculacion.session.ProyectoFacade;
import ec.edu.espe_ctt.vinculacion.session.SvinObjetivoBVivirFacade;
import ec.edu.espe_ctt.vinculacion.session.SvinObjetivoProgramaFacade;
import ec.edu.espe_ctt.vinculacion.session.SvinObjetivosEstraInstiFacade;
import ec.edu.espe_ctt.vinculacion.session.SvinProgramaVFacade;
import ec.edu.espe_ctt.vinculacion.session.SvinZonaDetalleFacade;
import ec.edu.espe_ctt.vinculacion.session.VDocenteVinculacionFacade;
import ec.edu.espe_ctt_investigacion.entity.SeaCanton;
import ec.edu.espe_ctt_investigacion.entity.SeaClasificadorPresup;
import ec.edu.espe_ctt_investigacion.entity.SeaParametrosDet;
import ec.edu.espe_ctt_investigacion.entity.SeaParroquia;
import ec.edu.espe_ctt_investigacion.entity.SeaProvincia;
import ec.edu.espe_ctt_investigacion.session.SeaClasificadorPresupFacade;
import ec.edu.espe_ctt_investigacion.session.SeaParametrosDetFacade;
import ec.edu.espe_ctt_investigacion.session.SeaProvinciaFacade;
import static java.io.File.separatorChar;
import java.io.Serializable;
import java.math.BigDecimal;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.component.UIOutput;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;
import javax.faces.event.ValueChangeEvent;
import javax.servlet.ServletContext;
import org.primefaces.context.RequestContext;
import org.primefaces.event.FileUploadEvent;
import org.primefaces.event.NodeCollapseEvent;
import org.primefaces.event.NodeExpandEvent;
import org.primefaces.event.NodeSelectEvent;
import org.primefaces.event.SelectEvent;
import org.primefaces.event.TabChangeEvent;
import org.primefaces.event.ToggleEvent;
import org.primefaces.extensions.component.timeline.TimelineUpdater;
import org.primefaces.extensions.event.timeline.TimelineAddEvent;
import org.primefaces.extensions.event.timeline.TimelineModificationEvent;
import org.primefaces.extensions.event.timeline.TimelineRangeEvent;
import org.primefaces.extensions.model.timeline.TimelineEvent;
import org.primefaces.extensions.model.timeline.TimelineGroup;
import org.primefaces.extensions.model.timeline.TimelineModel;
import org.primefaces.model.CheckboxTreeNode;
import org.primefaces.model.DefaultTreeNode;
import org.primefaces.model.TreeNode;
import org.primefaces.model.Visibility;

//</editor-fold>
/**
 *
 * @author Administrador
 */
@ManagedBean
@ViewScoped
public class ProyectoController implements Serializable {

//<editor-fold defaultstate="collapsed" desc="Atributos">
    @EJB
    private SegUsuarioFacade usuarioFacade;
    @EJB
    private VDocenteVinculacionFacade vistaDocenteFacade;
    @EJB
    private SvinProgramaVFacade programaFacade;
    @EJB
    private ProyectoFacade proyectoFacade;
    @EJB
    private SeaParametrosDetFacade parametrosDetFacade;
    @EJB
    private SvinZonaDetalleFacade vinZonaDetalleFacade;
    @EJB
    private DepartamentoProyectoFacade departamentoProyectoFacade;
    @EJB
    private CarreraProyectoFacade carreraProyectoFacade;
    @EJB
    private StvsubjFacade departamentoFacade;
    @EJB
    private StvmajrFacade carreraFacade;
    @EJB
    private SvinObjetivoProgramaFacade objetivoProgramaFacade;
    @EJB
    private AdquisicionProyectoFacade adquisicionProyectoFacade;
    @EJB
    private SeaProvinciaFacade provinciaFacade;
    @EJB
    private HitoProyectoFacade hitoProyectoFacade;
    @EJB
    private SvinObjetivoBVivirFacade svinObjBVivirFacade;
    @EJB
    private SvinObjetivosEstraInstiFacade svinObjEstraInstFacade;
    @EJB
    private ParametroEvaluacionFacade parametroEvaluacionFacade;

    private List<SeaParametrosDet> tipoPoblacionList;
    private List<SeaParametrosDet> tipoPoblacionSelectedList;
    private List<SeaParametrosDet> paramTipoAdquisicionProyectoList;
    private List<SvinZonaDetalle> svinZonaDetalleList;
    private List<SvinZonaDetalle> svinZonaDetalleList2;
    private List<DepartamentoProyecto> departamentoProyectoList;
    private List<CarreraProyecto> carreraProyectoList;
    private List<Stvsubj> departamentoList;
    private List<Stvmajr> carreraList;
    private List<AdquisicionProyecto> adquisicionProyectoList;
    private List<SeaProvincia> provinciaList;
    private List<SvinZonaDetalle> listaIngresar;
    private List<SvinZonaDetalle> listaEliminar;
    private List<HitoProyecto> hitoProyectoList;
    private List<SeaParametrosDet> paramSemestreList;
    private List<SvinObjetivoBVivir> objBVivirPadreList;
    private List<SvinObjetivoBVivir> objBVivirHijoList;
    private List<SvinObjetivosEstraInsti> perspectivasList;

    private Proyecto proyectoSelected;
    private SvinProgramaV programaSelected;
    private CarreraProyecto carreraProyectoSelected;
    private SvinObjetivoPrograma objetivoProyectoSelected;
    private SvinObjetivoPrograma objetivoProyectoPadreSelected;
    private SvinProgObj objetivoBVivirSelected;
    private AdquisicionProyecto adquisicionProyectoSelected;
    private DepartamentoProyecto departamentoProyectoSelected;
    private HitoProyecto hitoProyectoSelected;
    private SegUsuario docenteSelected;
    private SvinObjetivoBVivir objBVivirPadre = new SvinObjetivoBVivir();
    private SvinObjetivoBVivir objBVivirHijo = new SvinObjetivoBVivir();
    private SvinObjetivosEstraInsti perspectivaSelected;
    private SvinObjetivosEstraInsti objetivoEstrategicoSelected;
    private SvinObjetivosEstraInsti indicadorSelected;
    private SvinProgObjEstrategicos objetivoEstrategicoProyectoSelected;
    private CalificacionProyecto calificacionProyectoSelected;

    private boolean botonInicio = true;
    private Integer codProgramaSelected;
    private boolean controlGrabar;
    private boolean datosCompletos;
    private int indiceTabActivo;
    private int indiceTabActivoEjecucion;
    private TreeNode root3;
    private TreeNode[] selectedNodes2;
    private String nomDocenteBusqueda = "";
    private Stvmajr carreraSelected;

//</editor-fold>
//<editor-fold defaultstate="collapsed" desc="Constructor">
    public ProyectoController() {
        adquisicionProyectoSelected = new AdquisicionProyecto();
        svinZonaDetalleList = new ArrayList<>();
        svinZonaDetalleList2 = new ArrayList<>();
        objetivoProyectoSelected = new SvinObjetivoPrograma();
        departamentoProyectoSelected = new DepartamentoProyecto();
        carreraProyectoSelected = new CarreraProyecto();
        hitoProyectoSelected = new HitoProyecto();
        objetivoBVivirSelected = new SvinProgObj();

        datosCompletos = false;
        controlGrabar = false;
    }

    //</editor-fold>
//<editor-fold defaultstate="collapsed" desc="Init">
    @PostConstruct
    public void init() {
        tipoPoblacionList = parametrosDetFacade.findByCodigoParametro(SeaParametrosDetFacade.PARAM_TIPO_POBLACION);
        paramTipoAdquisicionProyectoList = parametrosDetFacade.findByCodigoParametro(SeaParametrosDetFacade.PARAM_TIPO_ADQUISICION_PROYECTO);
        paramSemestreList = parametrosDetFacade.findByCodigoParametro(SeaParametrosDetFacade.PARAM_SEMESTRE);
        provinciaList = provinciaFacade.findAllOrdenados();
        departamentoList = departamentoFacade.findDepartamento();
        carreraList = carreraFacade.findCarrera();
        objBVivirPadreList = svinObjBVivirFacade.findObjetivosPadre();
        perspectivasList = svinObjEstraInstFacade.findPrespectivaEstraInst();
        objetivoEstrategicoProyectoSelected = new SvinProgObjEstrategicos();
        grupoPartidaList = partidaPresupuestariaFacade.findClasificadorByPrepupuesto();
        modoEdicion = false;

        Object idProyecto = FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap().get("idProyecto");
        if (idProyecto != null) {
            proyectoSelected = proyectoFacade.findById(Integer.valueOf(idProyecto.toString()));
            seleccionarProyecto();
        } else { //Nuevo Proyecto
            Object idPrograma = FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap().get("idPrograma");
            programaSelected = programaFacade.find(Integer.valueOf(idPrograma.toString()));
            proyectoSelected = new Proyecto();
            proyectoSelected.setConvocatoria(convocatoriaFacade.findByEstadoAbierto());

            botonInicio = false;
            docenteSelected = new SegUsuario();
            nomDocenteBusqueda = "";
            tipoPoblacionSelectedList = new ArrayList<>();
            controlGrabar = true;

        }

        crearArbolMenu(Proyecto.ESTADO_CREADO);
    }

    //</editor-fold>
//<editor-fold defaultstate="collapsed" desc="Getter and Setter">
    public SvinProgObjEstrategicos getObjetivoEstrategicoProyectoSelected() {
        return objetivoEstrategicoProyectoSelected;
    }

    public void setObjetivoEstrategicoProyectoSelected(SvinProgObjEstrategicos objetivoEstrategicoProyectoSelected) {
        this.objetivoEstrategicoProyectoSelected = objetivoEstrategicoProyectoSelected;
    }

    public SvinObjetivosEstraInsti getPerspectivaSelected() {
        return perspectivaSelected;
    }

    public void setPerspectivaSelected(SvinObjetivosEstraInsti perspectivaSelected) {
        this.perspectivaSelected = perspectivaSelected;
    }

    public SvinObjetivosEstraInsti getObjetivoEstrategicoSelected() {
        return objetivoEstrategicoSelected;
    }

    public void setObjetivoEstrategicoSelected(SvinObjetivosEstraInsti objetivoEstrategicoSelected) {
        this.objetivoEstrategicoSelected = objetivoEstrategicoSelected;
    }

    public SvinObjetivosEstraInsti getIndicadorSelected() {
        return indicadorSelected;
    }

    public void setIndicadorSelected(SvinObjetivosEstraInsti indicadorSelected) {
        this.indicadorSelected = indicadorSelected;
    }

    public List<SvinObjetivosEstraInsti> getPerspectivasList() {
        return perspectivasList;
    }

    public void setPerspectivasList(List<SvinObjetivosEstraInsti> perspectivasList) {
        this.perspectivasList = perspectivasList;
    }

    public SvinProgObj getObjetivoBVivirSelected() {
        return objetivoBVivirSelected;
    }

    public void setObjetivoBVivirSelected(SvinProgObj objetivoBVivirSelected) {
        this.objetivoBVivirSelected = objetivoBVivirSelected;
    }

    public List<SvinObjetivoBVivir> getObjBVivirPadreList() {
        return objBVivirPadreList;
    }

    public void setObjBVivirPadreList(List<SvinObjetivoBVivir> objBVivirPadreList) {
        this.objBVivirPadreList = objBVivirPadreList;
    }

    public List<SvinObjetivoBVivir> getObjBVivirHijoList() {
        return objBVivirHijoList;
    }

    public void setObjBVivirHijoList(List<SvinObjetivoBVivir> objBVivirHijoList) {
        this.objBVivirHijoList = objBVivirHijoList;
    }

    public SvinObjetivoBVivir getObjBVivirPadre() {
        return objBVivirPadre;
    }

    public void setObjBVivirPadre(SvinObjetivoBVivir objBVivirPadre) {
        this.objBVivirPadre = objBVivirPadre;
    }

    public SvinObjetivoBVivir getObjBVivirHijo() {
        return objBVivirHijo;
    }

    public void setObjBVivirHijo(SvinObjetivoBVivir objBVivirHijo) {
        this.objBVivirHijo = objBVivirHijo;
    }

    public Stvmajr getCarreraSelected() {
        return carreraSelected;
    }

    public void setCarreraSelected(Stvmajr carreraSelected) {
        this.carreraSelected = carreraSelected;
    }

    public String getNomDocenteBusqueda() {
        return nomDocenteBusqueda;
    }

    public void setNomDocenteBusqueda(String nomDocenteBusqueda) {
        this.nomDocenteBusqueda = nomDocenteBusqueda;
    }

    public List<HitoProyecto> getHitoProyectoList() {
        return hitoProyectoList;
    }

    public void setHitoProyectoList(List<HitoProyecto> hitoProyectoList) {
        this.hitoProyectoList = hitoProyectoList;
    }

    public List<SeaParametrosDet> getParamSemestreList() {
        return paramSemestreList;
    }

    public void setParamSemestreList(List<SeaParametrosDet> paramSemestreList) {
        this.paramSemestreList = paramSemestreList;
    }

    public HitoProyecto getHitoProyectoSelected() {
        return hitoProyectoSelected;
    }

    public void setHitoProyectoSelected(HitoProyecto hitoProyectoSelected) {
        this.hitoProyectoSelected = hitoProyectoSelected;
    }

    public AdquisicionProyecto getAdquisicionProyectoSelected() {
        return adquisicionProyectoSelected;
    }

    public void setAdquisicionProyectoSelected(AdquisicionProyecto adquisicionProyectoSelected) {
        this.adquisicionProyectoSelected = adquisicionProyectoSelected;
    }

    public List<AdquisicionProyecto> getAdquisicionProyectoList() {
        return adquisicionProyectoList;
    }

    public void setAdquisicionProyectoList(List<AdquisicionProyecto> adquisicionProyectoList) {
        this.adquisicionProyectoList = adquisicionProyectoList;
    }

    public List<SeaParametrosDet> getParamTipoAdquisicionProyectoList() {
        return paramTipoAdquisicionProyectoList;
    }

    public void setParamTipoAdquisicionProyectoList(List<SeaParametrosDet> paramTipoAdquisicionProyectoList) {
        this.paramTipoAdquisicionProyectoList = paramTipoAdquisicionProyectoList;
    }

    public List<Stvsubj> getDepartamentoList() {
        return departamentoList;
    }

    public void setDepartamentoList(List<Stvsubj> departamentoList) {
        this.departamentoList = departamentoList;
    }

    public List<DepartamentoProyecto> getDepartamentoProyectoList() {
        return departamentoProyectoList;
    }

    public void setDepartamentoProyectoList(List<DepartamentoProyecto> departamentoProyectoList) {
        this.departamentoProyectoList = departamentoProyectoList;
    }

    public DepartamentoProyecto getDepartamentoProyectoSelected() {
        return departamentoProyectoSelected;
    }

    public void setDepartamentoProyectoSelected(DepartamentoProyecto departamentoProyectoSelected) {
        this.departamentoProyectoSelected = departamentoProyectoSelected;
    }

    public CarreraProyecto getCarreraProyectoSelected() {
        return carreraProyectoSelected;
    }

    public void setCarreraProyectoSelected(CarreraProyecto carreraProyectoSelected) {
        this.carreraProyectoSelected = carreraProyectoSelected;
    }

    public SegUsuario getDocenteSelected() {
        return docenteSelected;
    }

    public void setDocenteSelected(SegUsuario docenteSelected) {
        this.docenteSelected = docenteSelected;
    }

    public List<Stvmajr> getCarreraList() {
        return carreraList;
    }

    public void setCarreraList(List<Stvmajr> carreraList) {
        this.carreraList = carreraList;
    }

    public List<CarreraProyecto> getCarreraProyectoList() {
        return carreraProyectoList;
    }

    public void setCarreraProyectoList(List<CarreraProyecto> carreraProyectoList) {
        this.carreraProyectoList = carreraProyectoList;
    }

    public SvinObjetivoPrograma getObjetivoProyectoSelected() {
        return objetivoProyectoSelected;
    }

    public void setObjetivoProyectoSelected(SvinObjetivoPrograma objetivoProyectoSelected) {
        this.objetivoProyectoSelected = objetivoProyectoSelected;
    }

    public boolean isControlGrabar() {
        return controlGrabar;
    }

    public void setControlGrabar(boolean controlGrabar) {
        this.controlGrabar = controlGrabar;
    }

    public Integer getCodProgramaSelected() {
        return codProgramaSelected;
    }

    public void setCodProgramaSelected(Integer codProgramaSelected) {
        this.codProgramaSelected = codProgramaSelected;
    }

    public int getIndiceTabActivo() {
        return indiceTabActivo;
    }

    public void setIndiceTabActivo(int indiceTabActivo) {
        this.indiceTabActivo = indiceTabActivo;
    }

    public boolean isBotonInicio() {
        return botonInicio;
    }

    public void setBotonInicio(boolean botonInicio) {
        this.botonInicio = botonInicio;
    }

    public String getNombreProySeleccionado() {
        if (proyectoSelected != null && proyectoSelected.getNombre() != null) {
            return ("PROYECTO: " + proyectoSelected.getNombre());
        } else {
            return "NUEVO PROYECTO";
        }
    }

    public Proyecto getProyectoSelected() {
        return proyectoSelected;
    }

    public void setProyectoSelected(Proyecto proyectoSelected) {
        this.proyectoSelected = proyectoSelected;
    }

    public boolean isDatosCompletos() {
        return datosCompletos;
    }

    public void setDatosCompletos(boolean datosCompletos) {
        this.datosCompletos = datosCompletos;
    }

    public List<SeaParametrosDet> getTipoPoblacionList() {
        return tipoPoblacionList;
    }

    public void setTipoPoblacionList(List<SeaParametrosDet> tipoPoblacionList) {
        this.tipoPoblacionList = tipoPoblacionList;
    }

    public List<SeaParametrosDet> getTipoPoblacionSelectedList() {
        return tipoPoblacionSelectedList;
    }

    public void setTipoPoblacionSelectedList(List<SeaParametrosDet> tipoPoblacionSelectedList) {
        this.tipoPoblacionSelectedList = tipoPoblacionSelectedList;
    }

    public TreeNode getRoot3() {
        return root3;
    }

    public void setRoot3(TreeNode root3) {
        this.root3 = root3;
    }

    public TreeNode[] getSelectedNodes2() {
        return selectedNodes2;
    }

    public void setSelectedNodes2(TreeNode[] selectedNodes2) {
        this.selectedNodes2 = selectedNodes2;
    }

    //</editor-fold>
//<editor-fold defaultstate="collapsed" desc="Tab1-Datos Generales">
    public void cancelarP1() {
        proyectoSelected = proyectoFacade.find(proyectoSelected.getId());
        if (proyectoSelected.getResponsableList() != null && !proyectoSelected.getResponsableList().isEmpty()) {
            llenarDatosDocenteXUsuId(proyectoSelected.getResponsableList().get(0).getUsuario().getUsuId());
        }
        tipoPoblacionSelectedList = new ArrayList<>();
        for (TipoPoblacionProyecto tipoPoblacionProyecto : proyectoSelected.getTipoPoblacionList()) {
            tipoPoblacionSelectedList.add(tipoPoblacionProyecto.getTipoPoblacion());
        }

        datosCompletos = false;
        controlGrabar = false;
    }

    @EJB
    private ConvocatoriaFacade convocatoriaFacade;

    private Convocatoria convocatoriaAbierta;

    public Convocatoria getConvocatoriaAbierta() {
        return convocatoriaAbierta;
    }

    public void setConvocatoriaAbierta(Convocatoria convocatoriaAbierta) {
        this.convocatoriaAbierta = convocatoriaAbierta;
    }

    public String registraP1() {
        try {
            if (proyectoSelected.getTipoPoblacionList() != null) {
                for (Iterator<TipoPoblacionProyecto> iterator = proyectoSelected.getTipoPoblacionList().iterator(); iterator.hasNext();) {
                    TipoPoblacionProyecto tipoPoblacionProyecto = iterator.next();
                    boolean encontro = false;
                    for (SeaParametrosDet tipoPoblacion : tipoPoblacionSelectedList) {
                        if (tipoPoblacionProyecto.getTipoPoblacion().getPrdId().equals(tipoPoblacion.getPrdId())) {
                            encontro = true;
                            break;
                        }
                    }
                    if (!encontro) {
                        iterator.remove();
                    }
                }

            }

            for (SeaParametrosDet tipoPoblacion : tipoPoblacionSelectedList) {
                boolean encontro = false;
                if (proyectoSelected.getTipoPoblacionList() != null) {
                    for (TipoPoblacionProyecto tipoPoblacionProyecto : proyectoSelected.getTipoPoblacionList()) {
                        if (tipoPoblacion.getPrdId().equals(tipoPoblacionProyecto.getTipoPoblacion().getPrdId())) {
                            encontro = true;
                            break;
                        }
                    }
                }
                if (!encontro) {
                    proyectoSelected.addTipoPoblacion(new TipoPoblacionProyecto(proyectoSelected, tipoPoblacion));
                }
            }

            if (validarVaciosP1()) {
                SegUsuario usu = usuarioFacade.find(docenteSelected.getUsuId());
                usu.setUsuEmail(docenteSelected.getUsuEmail());
                usu.setUsuTelefonoFijo(docenteSelected.getUsuTelefonoFijo());
                usuarioFacade.edit(usu);

                if (proyectoSelected.getId() == null) {
                    proyectoSelected.setPrograma(programaSelected);
                    proyectoSelected.addObjetivoProyecto(new SvinObjetivoPrograma(proyectoSelected, SvinObjetivoPrograma.TIPO_FIN, 1));
                    proyectoSelected.addObjetivoProyecto(new SvinObjetivoPrograma(proyectoSelected, SvinObjetivoPrograma.TIPO_PROPOSITO, 2));
                    proyectoSelected.generarCodigo(proyectoFacade.findCountByDepartamento(proyectoSelected.getDepartamento().getStvsubjCode()) + 1);
                    proyectoFacade.create(proyectoSelected);
                    crearArbolMenu(Proyecto.ESTADO_CREADO);
                    RequestContext.getCurrentInstance().update("formPrincipal");
                } else {
                    proyectoFacade.edit(proyectoSelected);
                }
                cancelarP1();
                FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Info", "La información se guardó exitosamente"));
            }
        } catch (Exception e) {
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", "No fue posible grabar la información ingresada"));
        }
        return "";
    }

    public boolean validarVaciosP1() {
        datosCompletos = true;
        if (proyectoSelected.getTipoPoblacionList() == null || proyectoSelected.getTipoPoblacionList().isEmpty()) {
            FacesContext.getCurrentInstance().addMessage("formPrincipal:selTipoPoblacion", new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", "Debe seleccionar al menos un tipo de población"));
            datosCompletos = false;
        }
        if (!proyectoSelected.getFechaFinalizacion().after(proyectoSelected.getFechaInicio())) {
            FacesContext.getCurrentInstance().addMessage("formPrincipal:fechaFinProyecto", new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", "La fecha de finalización debe ser mayor que la fecha de inicio"));
            datosCompletos = false;
        }

        if (docenteSelected.getUsuId() == null) {
            FacesContext.getCurrentInstance().addMessage("formPrincipal:lblNombreDirectorProyecto", new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", "Campo obligatorio"));
            datosCompletos = false;
        }

        /*datosCompletos = true;
         if (proyectoSelected.getNombre() == null || proyectoSelected.getNombre().trim().isEmpty()
         || proyectoSelected.getFechaPresentacion() == null
         || proyectoSelected.getFechaInicio() == null
         || proyectoSelected.getFechaFinalizacion() == null
         || proyectoSelected.getTipoPoblacion() == null || proyectoSelected.getTipoPoblacion().getPrdId() == null
         || programaSelected.getSvinDepcenproyList() == null || programaSelected.getSvinDepcenproyList().isEmpty()) {
         datosCompletos = false;
         }*/
        return datosCompletos;
    }

    public void validarFechaInicio() {
        if (proyectoSelected.getFechaFinalizacion() != null && proyectoSelected.getFechaFinalizacion().compareTo(proyectoSelected.getFechaInicio()) <= 0) {
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", "La fecha de inicio debe ser menor que la fecha de finalización"));
            proyectoSelected.setFechaInicio(null);
        }
        validarVaciosP1();
    }

    public void validarFechaFin() {
        if (proyectoSelected.getFechaInicio() != null && proyectoSelected.getFechaFinalizacion().compareTo(proyectoSelected.getFechaInicio()) <= 0) {
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", "La fecha de finalización debe ser mayor que la fecha de inicio"));
            proyectoSelected.setFechaFinalizacion(null);
        }
        validarVaciosP1();

    }

    public void eliminarProyecto() {

        try {
            //proyectoSelected.setEstado("I");
            proyectoFacade.edit(proyectoSelected);
            FacesContext.getCurrentInstance().getExternalContext().redirect("listadoProyectos.xhtml?idPrograma=" + programaSelected.getSprvId().toString());
        } catch (Exception e) {
        }
    }

    public void seleccionarTipoPoblacion(ValueChangeEvent event) {
        /*Long codSeleccionado = (Long) event.getNewValue();
         for (SeaParametrosDet par : tipoPoblacionList) {
         if (par.getPrdId().equals(codSeleccionado)) {
         proyectoSelected.setTipoPoblacion(par);
         }
         }*/
    }

    public List<String> completeText(String query) {
        System.out.println(" el valor es tar " + query);
        List<VDocenteVinculacion> doceVincuLista = vistaDocenteFacade.findByName(query);
        System.out.println(" la lista es " + doceVincuLista.size());
        List<String> results = new ArrayList<String>();
        for (int i = 0; i < doceVincuLista.size(); i++) {
            results.add(doceVincuLista.get(i).getUsuApellidos() + " " + doceVincuLista.get(i).getUsuNombres());
        }
        return results;
    }

    public void onItemSelect(SelectEvent event) {
        System.out.println(" el evet es " + event.getObject());
        llenarDatosDocenteXNombres(event.getObject().toString());
        //validarVaciosP1();
    }

    private void llenarDatosDocenteXNombres(String nombresApellidos) {
        List<VDocenteVinculacion> doceVincuLista = vistaDocenteFacade.findByName(nombresApellidos);
        docenteSelected = usuarioFacade.findUsuarioByCodUsu(new BigDecimal(doceVincuLista.get(0).getUsuId()));
        docenteSelected.setCargo(doceVincuLista.get(0).getNbrjobsDesc());
        docenteSelected.setDepartamento(doceVincuLista.get(0).getStvsubjDesc());
        proyectoSelected.asignarResponsable(docenteSelected);

    }

    private void llenarDatosDocenteXUsuId(BigDecimal usuId) {
        VDocenteVinculacion vDocenteVinculacion = vistaDocenteFacade.findByUsuId(usuId);
        docenteSelected = usuarioFacade.findUsuarioByCodUsu(new BigDecimal(vDocenteVinculacion.getUsuId()));
        docenteSelected.setCargo(vDocenteVinculacion.getNbrjobsDesc());
        docenteSelected.setDepartamento(vDocenteVinculacion.getStvsubjDesc());
        nomDocenteBusqueda = docenteSelected.getUsuApellidos() + " " + docenteSelected.getUsuNombres();
    }

    //</editor-fold>
//<editor-fold defaultstate="collapsed" desc="Tab2-Origen de los fondos">
    public String validarVaciosP2() {
        datosCompletos = true;
        if (proyectoSelected.getPresupuestoAporteUniv() == null
                || proyectoSelected.getPresupuestoAporteUnivValorado() == null
                || proyectoSelected.getPresupuestoEntidadAuspiciante() == null
                || proyectoSelected.getPresupuestoContraparte() == null) {
            datosCompletos = false;
        }
        return "";
    }

    //</editor-fold>    
//<editor-fold defaultstate="collapsed" desc="Tab3-Cobertura y Localización">
    public String editarP3() {
        controlGrabar = true;
        return "";
    }

    public void cancelarP3() {
        cancelarP1();
        svinZonaDetalleList = vinZonaDetalleFacade.findXProyecto(proyectoSelected.getId());
        svinZonaDetalleList2 = vinZonaDetalleFacade.findXProyecto(proyectoSelected.getId());
        Collections.sort(svinZonaDetalleList2);
        root3 = crearArbol();

        datosCompletos = false;
        controlGrabar = false;
    }

    public String registraP3() {
        try {
            listaIngresar = verificarNuevos();
            listaEliminar = verificarEliminados();

            vinZonaDetalleFacade.guardar(listaIngresar, listaEliminar);
            cancelarP3();
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Info", "La información se guardó exitosamente"));

        } catch (Exception e) {
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", "No fue posible grabar la información ingresada"));
        }
        return "";
    }

    public String validarVaciosP3() {
        datosCompletos = true;

        if (selectedNodes2.length == 0) {
            datosCompletos = false;
        }
        return "";
    }

    public TreeNode crearArbol() {
        TreeNode root = new CheckboxTreeNode(new SvinZonaDetalle(), null);
        for (SeaProvincia provincia : provinciaList) {
            TreeNode nodoProvincia = new CheckboxTreeNode(new SvinZonaDetalle(provincia), root);
            for (SeaCanton canton : provincia.getSeaCantonList()) {
                TreeNode nodoCanton = new CheckboxTreeNode(new SvinZonaDetalle(canton), nodoProvincia);
                for (SeaParroquia parroquia : canton.getSeaParroquiaList()) {
                    SvinZonaDetalle svinZonaDetalle = new SvinZonaDetalle(parroquia);
                    TreeNode nodoParroquia = new CheckboxTreeNode(svinZonaDetalle, nodoCanton);
                    if (buscarSvinZonaDetalleBD(svinZonaDetalle)) {
                        nodoParroquia.setSelected(true);
                    }
                }
            }
        }
        return root;
    }

    private boolean buscarSvinZonaDetalleBD(SvinZonaDetalle svinZonaDetalleBuscar) {
        for (SvinZonaDetalle svinZonaDetalle : svinZonaDetalleList) {
            boolean encontro = svinZonaDetalle.comparar(svinZonaDetalleBuscar);
            if (encontro) {
                return true;
            }
        }
        return false;
    }

    private List<SvinZonaDetalle> verificarNuevos() {
        List<SvinZonaDetalle> listaTemp = new ArrayList<>();
        String codProvincia = "";
        String codCanton = "";

        for (TreeNode node : selectedNodes2) {
            SvinZonaDetalle seleccionado = (SvinZonaDetalle) node.getData();
            System.out.println(seleccionado.getNombre());
            if (seleccionado.getParroquia() != null) {
                SvinZonaDetalle nuevo = null;
                if (!seleccionado.getProvincia().getProId().equals(codProvincia)) {
                    codProvincia = seleccionado.getProvincia().getProId();
                    nuevo = new SvinZonaDetalle(seleccionado.getProvincia());
                    if (!buscarSvinZonaDetalleBD(nuevo)) {
                        nuevo.setProyecto(proyectoSelected);
                        listaTemp.add(nuevo);
                    }
                }
                if (!seleccionado.getCanton().getCanId().equals(codCanton)) {
                    codCanton = seleccionado.getCanton().getCanId();
                    nuevo = new SvinZonaDetalle(seleccionado.getCanton());
                    if (!buscarSvinZonaDetalleBD(nuevo)) {
                        nuevo.setProyecto(proyectoSelected);
                        listaTemp.add(nuevo);
                    }
                }
                nuevo = new SvinZonaDetalle(seleccionado.getParroquia());
                if (!buscarSvinZonaDetalleBD(nuevo)) {
                    nuevo.setProyecto(proyectoSelected);
                    listaTemp.add(nuevo);
                }
            }
        }
        return listaTemp;
    }

    private List<SvinZonaDetalle> verificarEliminados() {
        List<SvinZonaDetalle> listaTemp = new ArrayList<>();
        String codProvincia = "";
        String codCanton = "";

        for (SvinZonaDetalle seleccionado : svinZonaDetalleList) {

            if (codCanton.equals("")) {
                if (seleccionado.getCanton() != null) {
                    codCanton = seleccionado.getCanton().getCanId();
                }
            } else {
                if (seleccionado.getCanton() != null && !seleccionado.getCanton().getCanId().equals(codCanton)) {
                    verificarEliminarCanton(codCanton, listaTemp);
                    codCanton = seleccionado.getCanton().getCanId();
                }
            }
            if (codProvincia.equals("")) {
                codProvincia = seleccionado.getProvincia().getProId();
            } else {
                if (!seleccionado.getProvincia().getProId().equals(codProvincia)) {
                    verificarEliminarProvincia(codProvincia, listaTemp);
                    codProvincia = seleccionado.getProvincia().getProId();
                }
            }
            if (seleccionado.getParroquia() != null) {

                SvinZonaDetalle eliminar = new SvinZonaDetalle(seleccionado.getParroquia());
                if (!buscarSvinZonaDetalleMemoria(eliminar)) {
                    SvinZonaDetalle eliminarParroquia = getParroquiaEliminar(seleccionado.getParroquia().getPrqId());
                    listaTemp.add(eliminarParroquia);
                }
            }
        }
        verificarEliminarCanton(codCanton, listaTemp);
        verificarEliminarProvincia(codProvincia, listaTemp);

        return listaTemp;
    }

    private boolean buscarSvinZonaDetalleMemoria(SvinZonaDetalle svinZonaDetalleBuscar) {
        for (TreeNode node : selectedNodes2) {
            SvinZonaDetalle svinZonaDetalle = (SvinZonaDetalle) node.getData();
            boolean encontro = svinZonaDetalle.comparar(svinZonaDetalleBuscar);
            if (encontro) {
                return true;
            }
        }
        return false;
    }

    private void verificarEliminarCanton(String codCanton, List<SvinZonaDetalle> listaTemp) {
        int cont = 0;
        for (SvinZonaDetalle svinZonaDetalle : listaTemp) {
            if (svinZonaDetalle.getParroquia() != null && svinZonaDetalle.getCanton().getCanId().equals(codCanton)) {
                cont++;
            }
        }
        for (SvinZonaDetalle nuevo : listaIngresar) {
            if (nuevo.getParroquia() != null && nuevo.getCanton().getCanId().equals(codCanton)) {
                cont--;
            }
        }
        if (cont > 0) {
            SvinZonaDetalle eliminarCanton = getCantonEliminar(codCanton, cont);
            if (eliminarCanton != null) {
                listaTemp.add(eliminarCanton);
            }
        }
    }

    private void verificarEliminarProvincia(String codProvincia, List<SvinZonaDetalle> listaTemp) {
        int cont = 0;
        for (SvinZonaDetalle svinZonaDetalle : listaTemp) {
            if (svinZonaDetalle.getParroquia() != null && svinZonaDetalle.getProvincia().getProId().equals(codProvincia)) {
                cont++;
            }
        }
        for (SvinZonaDetalle nuevo : listaIngresar) {
            if (nuevo.getParroquia() != null && nuevo.getProvincia().getProId().equals(codProvincia)) {
                cont--;
            }
        }

        if (cont > 0) {
            SvinZonaDetalle eliminarProvincia = getProvinciaEliminar(codProvincia, cont);
            if (eliminarProvincia != null) {
                listaTemp.add(eliminarProvincia);
            }
        }
    }

    private SvinZonaDetalle getProvinciaEliminar(String codProvincia, int contVerificar) {
        int cont = 0;
        for (SvinZonaDetalle svinZonaDetalle : svinZonaDetalleList) {
            if (svinZonaDetalle.getParroquia() != null && svinZonaDetalle.getProvincia().getProId().equals(codProvincia)) {
                cont++;
            }
        }
        if (cont == contVerificar) {
            for (SvinZonaDetalle svinZonaDetalle : svinZonaDetalleList) {
                if (svinZonaDetalle.getProvincia() != null && svinZonaDetalle.getCanton() == null && svinZonaDetalle.getParroquia() == null
                        && svinZonaDetalle.getProvincia().getProId().equals(codProvincia)) {
                    return svinZonaDetalle;
                }
            }
        }
        return null;
    }

    private SvinZonaDetalle getCantonEliminar(String codCanton, int contVerificar) {
        int cont = 0;
        for (SvinZonaDetalle svinZonaDetalle : svinZonaDetalleList) {
            if (svinZonaDetalle.getParroquia() != null && svinZonaDetalle.getCanton().getCanId().equals(codCanton)) {
                cont++;
            }
        }

        if (cont == contVerificar) {
            for (SvinZonaDetalle svinZonaDetalle : svinZonaDetalleList) {
                if (svinZonaDetalle.getCanton() != null && svinZonaDetalle.getParroquia() == null
                        && svinZonaDetalle.getCanton().getCanId().equals(codCanton)) {
                    return svinZonaDetalle;
                }
            }
        }
        return null;
    }

    private SvinZonaDetalle getParroquiaEliminar(String codParroquia) {
        for (SvinZonaDetalle svinZonaDetalle : svinZonaDetalleList) {
            if (svinZonaDetalle.getParroquia() != null && svinZonaDetalle.getParroquia().getPrqId().equals(codParroquia)) {
                return svinZonaDetalle;
            }
        }
        return null;
    }

    //</editor-fold>
//<editor-fold defaultstate="collapsed" desc="Tab4-Detalle de entregables del proyecto">
    public String validarVaciosP4() {
        datosCompletos = true;
        if (proyectoSelected.getBienes() == null || proyectoSelected.getBienes().trim().isEmpty()
                || proyectoSelected.getServicios() == null || proyectoSelected.getServicios().trim().isEmpty()
                || proyectoSelected.getBienesServicios() == null || proyectoSelected.getBienesServicios().trim().isEmpty()) {
            datosCompletos = false;
        }
        return "";
    }

    public String registraP4() {
        if ((proyectoSelected.getBienes() == null || proyectoSelected.getBienes().trim().isEmpty())
                && (proyectoSelected.getServicios() == null || proyectoSelected.getServicios().trim().isEmpty())
                && (proyectoSelected.getBienesServicios() == null || proyectoSelected.getBienesServicios().trim().isEmpty())) {
            FacesContext.getCurrentInstance().addMessage("formPrincipal:txtBienes", new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", "Debe ingresar por lo menos un bien o servicio"));
        } else {
            registraP1();
        }
        return "";
    }

    //</editor-fold>
//<editor-fold defaultstate="collapsed" desc="Tab5-Docentes participantes">
    public void cancelarP5() {
        controlGrabar = false;
        datosCompletos = false;
        departamentoProyectoList = departamentoProyectoFacade.findByProyecto(proyectoSelected.getId());
    }

    public boolean validarVaciosP5() {
        datosCompletos = true;
        if (departamentoProyectoSelected.getDepartamento() == null || departamentoProyectoSelected.getDepartamento().getStvsubjCode() == null
                || departamentoProyectoSelected.getNroDocentes() == null) {
            datosCompletos = false;
        }
        return datosCompletos;
    }

    public void agregarP5(ActionEvent event) {
        departamentoProyectoSelected = new DepartamentoProyecto(proyectoSelected);
        controlGrabar = true;

    }

    public void eliminarP5() {
        try {
            departamentoProyectoFacade.remove(departamentoProyectoSelected);
            cancelarP5();
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Info", "El registro ha sido eliminado exitosamente"));
        } catch (Exception e) {
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", "No fue posible eliminar el registro seleccionado"));
        }
    }

    public String registraP5() {
        try {
            if (departamentoProyectoSelected.getId() == null) {
                departamentoProyectoFacade.create(departamentoProyectoSelected);
            } else {
                departamentoProyectoFacade.edit(departamentoProyectoSelected);
            }
            cancelarP5();
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Info", "La información se guardó exitosamente"));
            RequestContext.getCurrentInstance().update("formPrincipal:panel5");
        } catch (Exception e) {
            try {
                Throwable t = (Throwable) e;
                while (t.getCause() != null) {
                    t = t.getCause();
                }
                String msgError = "No fue posible grabar la información ingresada";
                String controlMsgError = null;
                if (t.getMessage().toUpperCase().contains("ORA-00001")) {
                    msgError = "Ya existe un registro para el Departamento seleccionado";
                    departamentoProyectoList = departamentoProyectoFacade.findByProyecto(proyectoSelected.getId());
                    RequestContext.getCurrentInstance().update("formPrincipal:dataTDocentesParticipantes");
                    controlMsgError = "formPrincipal:selDepartamento";
                }
                FacesContext.getCurrentInstance().addMessage(controlMsgError, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", msgError));
            } catch (Exception e2) {
            }
        }
        return "";
    }

    //</editor-fold>
//<editor-fold defaultstate="collapsed" desc="Tab6-Estudiantes participantes">
    public void eliminarP6() {
        try {
            carreraProyectoFacade.remove(carreraProyectoSelected);
            cancelarP6();
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Info", "El registro ha sido eliminado exitosamente"));
        } catch (Exception e) {
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", "No fue posible eliminar el registro seleccionado"));
        }
    }

    public void cancelarP6() {
        controlGrabar = false;
        datosCompletos = false;
        carreraProyectoList = carreraProyectoFacade.findByProyecto(proyectoSelected.getId());
    }

    public boolean validarVaciosP6() {
        datosCompletos = true;
        if (carreraProyectoSelected.getCarrera() == null || carreraProyectoSelected.getCarrera().getStvmajrCode() == null
                || carreraProyectoSelected.getNroEstudiantes() == null) {
            datosCompletos = false;
        }
        return datosCompletos;
    }

    /*public void seleccionarCarrera(ValueChangeEvent event) {
     String codSeleccionado = (String) event.getNewValue();
     if (codSeleccionado.equals("0")) {
     carreraProyectoSelected.setCarrera(new Stvmajr());
     } else {
     for (Stvmajr car : carreraList) {
     if (car.getStvmajrCode().equals(codSeleccionado)) {
     carreraProyectoSelected.setCarrera(car);
     break;
     }
     }
     }
     */
    /*public void seleccionarCarrera(SelectEvent event) {
     String[] temp = event.getObject().toString().split("-");
     String cod = temp[temp.length - 1];
     event.getObject().toString();
     carreraProyectoSelected.setCarrera(new Stvmajr(cod));
     //validarVaciosP1();
     }*/

    /*  public List<Stvmajr> buscarCarrera(String query) {
     carreraList = carreraFacade.findByNombre(query);
     return carreraList;
     }
     */
    public List<String> buscarCarrera(String query) {
        carreraList = carreraFacade.findByNombre(query);
        List<String> temp = new ArrayList<>();
        for (Stvmajr car : carreraList) {
            temp.add(car.getStvmajrDesc() + "-" + car.getStvmajrCode());
        }
        return temp;
    }
    private String nomCarreraSeleccionada;

    public String getNomCarreraSeleccionada() {
        return nomCarreraSeleccionada;
    }

    public void setNomCarreraSeleccionada(String nomCarreraSeleccionada) {
        this.nomCarreraSeleccionada = nomCarreraSeleccionada;
    }

    public String getTotalDocentesParticipantes() {
        DecimalFormat decimalFormat;
        Locale locale = new Locale("es", "ES");
        String pattern = "###,##0";

        decimalFormat = (DecimalFormat) NumberFormat.getNumberInstance(locale);
        decimalFormat.applyPattern(pattern);
        Integer total = 0;
        if (departamentoProyectoList != null) {

            for (DepartamentoProyecto departamentoProyecto : departamentoProyectoList) {
                try {
                    total += departamentoProyecto.getNroDocentes();
                } catch (Exception e) {
                }
            }
        }
        return decimalFormat.format(total);
    }

    public String getTotalEstudiantesParticipantes() {
        DecimalFormat decimalFormat;
        Locale locale = new Locale("es", "ES");
        String pattern = "###,##0";

        decimalFormat = (DecimalFormat) NumberFormat.getNumberInstance(locale);
        decimalFormat.applyPattern(pattern);
        Integer total = 0;
        if (carreraProyectoList != null) {
            for (CarreraProyecto carreraProyecto : carreraProyectoList) {
                try {
                    total += carreraProyecto.getNroEstudiantes();
                } catch (Exception e) {
                }
            }
        }
        return decimalFormat.format(total);
    }

    public String registraP6() {
        try {
            String[] temp = nomCarreraSeleccionada.split("-");
            String cod = temp[temp.length - 1];
            carreraProyectoSelected.setCarrera(carreraFacade.find(cod));

            if (carreraProyectoSelected.getId() == null) {
                carreraProyectoFacade.create(carreraProyectoSelected);
            } else {
                carreraProyectoFacade.edit(carreraProyectoSelected);
            }
            cancelarP6();
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Info", "La información se guardó exitosamente"));
            RequestContext.getCurrentInstance().update("formPrincipal:panel6");
        } catch (Exception e) {
            try {
                Throwable t = (Throwable) e;
                while (t.getCause() != null) {
                    t = t.getCause();
                }
                String msgError = "No fue posible grabar la información ingresada";
                String controlMsgError = null;
                if (t.getMessage().toUpperCase().contains("ORA-00001")) {
                    msgError = "Ya existe un registro para la Carrera seleccionada";
                    carreraProyectoList = carreraProyectoFacade.findByProyecto(proyectoSelected.getId());
                    RequestContext.getCurrentInstance().update("formPrincipal:dataTEstudiantesParticipantes");
                    controlMsgError = "formPrincipal:selCarrera";
                }
                FacesContext.getCurrentInstance().addMessage(controlMsgError, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", msgError));
            } catch (Exception e2) {
            }
        }
        return "";
    }

    public void agregarP6(ActionEvent event) {
        carreraProyectoSelected = new CarreraProyecto(proyectoSelected);
        nomCarreraSeleccionada = "";
        controlGrabar = true;

    }

    public String editarP6() {
        nomCarreraSeleccionada = carreraProyectoSelected.getCarrera().getStvmajrDesc() + "-" + carreraProyectoSelected.getCarrera().getStvmajrCode();
        controlGrabar = true;
        datosCompletos = false;
        return "";
    }

    //</editor-fold>
//<editor-fold defaultstate="collapsed" desc="Tab7-Presupuesto Detallado y Fuentes de Financiamiento">
    private SeaClasificadorPresup grupoPartidaSelected;
    private SeaClasificadorPresup subGrupo1PartidaSelected;
    private SeaClasificadorPresup subGrupo2PartidaSelected;
    private PresupuestoProyecto presupuestoProyectoSelected;
    private List<SeaClasificadorPresup> grupoPartidaList;

    public List<SeaClasificadorPresup> getGrupoPartidaList() {
        return grupoPartidaList;
    }

    public void setGrupoPartidaList(List<SeaClasificadorPresup> grupoPartidaList) {
        this.grupoPartidaList = grupoPartidaList;
    }

    public SeaClasificadorPresup getGrupoPartidaSelected() {
        return grupoPartidaSelected;
    }

    public void setGrupoPartidaSelected(SeaClasificadorPresup grupoPartidaSelected) {
        this.grupoPartidaSelected = grupoPartidaSelected;
    }

    public SeaClasificadorPresup getSubGrupo1PartidaSelected() {
        return subGrupo1PartidaSelected;
    }

    public void setSubGrupo1PartidaSelected(SeaClasificadorPresup subGrupo1PartidaSelected) {
        this.subGrupo1PartidaSelected = subGrupo1PartidaSelected;
    }

    public SeaClasificadorPresup getSubGrupo2PartidaSelected() {
        return subGrupo2PartidaSelected;
    }

    public void setSubGrupo2PartidaSelected(SeaClasificadorPresup subGrupo2PartidaSelected) {
        this.subGrupo2PartidaSelected = subGrupo2PartidaSelected;
    }

    public PresupuestoProyecto getPresupuestoProyectoSelected() {
        return presupuestoProyectoSelected;
    }

    public void setPresupuestoProyectoSelected(PresupuestoProyecto presupuestoProyectoSelected) {
        this.presupuestoProyectoSelected = presupuestoProyectoSelected;
    }
    @EJB
    private SeaClasificadorPresupFacade partidaPresupuestariaFacade;

    public void agregarP7(ActionEvent event) {
        presupuestoProyectoSelected = new PresupuestoProyecto(proyectoSelected);
        controlGrabar = true;
    }

    public String seleccionarEdicionP7() {
        grupoPartidaSelected = presupuestoProyectoSelected.getPartidaPresupuestaria().getScpPadre().getScpPadre();
        subGrupo1PartidaSelected = presupuestoProyectoSelected.getPartidaPresupuestaria().getScpPadre();

        controlGrabar = true;
        datosCompletos = false;
        return "";
    }

    public void cancelarP7(boolean setearBotones) {
        proyectoSelected = proyectoFacade.find(proyectoSelected.getId());
        if (setearBotones) {
            datosCompletos = false;
            controlGrabar = false;
            grupoPartidaSelected = new SeaClasificadorPresup();
            subGrupo1PartidaSelected = new SeaClasificadorPresup();
            subGrupo2PartidaSelected = new SeaClasificadorPresup();
            presupuestoProyectoSelected = new PresupuestoProyecto(proyectoSelected);
        }
    }

    public String registraP7() {
        try {
            proyectoSelected.addPresupuesto(presupuestoProyectoSelected);
            proyectoFacade.edit(proyectoSelected);
            cancelarP7(true);
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Info", "La información se guardó exitosamente"));
        } catch (Exception e) {
            try {
                cancelarP7(false);
                Throwable t = (Throwable) e;
                while (t.getCause() != null) {
                    t = t.getCause();
                }
                String msgError = "No fue posible grabar la información ingresada";
                String controlMsgError = null;
                if (t.getMessage().toUpperCase().contains("ORA-00001")) {
                    msgError = "Ya existe un registro para la Partida Presupuestaria seleccionada";
                    controlMsgError = "formPrincipal:selPartida";
                }
                FacesContext.getCurrentInstance().addMessage(controlMsgError, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", msgError));
            } catch (Exception e2) {
            }
        }
        return "";
    }

    public void eliminarP7() {
        try {
            proyectoSelected.removePresupuesto(presupuestoProyectoSelected);
            proyectoFacade.edit(proyectoSelected);
            cancelarP7(true);
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Info", "El registro ha sido eliminado exitosamente"));
        } catch (Exception e) {
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", "No fue posible eliminar el registro seleccionado"));
        }
    }

    public String seleccionarPartida() {
        if (presupuestoProyectoSelected.getPartidaPresupuestaria().getScpId().equals(new BigDecimal("710108"))) {
            presupuestoProyectoSelected.setTipoGasto("C");
        }
        return "";
    }

    public String seleccionarGrupoPartida() {
        subGrupo1PartidaSelected = null;
        presupuestoProyectoSelected.setPartidaPresupuestaria(null);
        return "";
    }

    public String seleccionarSubGrupo1Partida() {
        presupuestoProyectoSelected.setPartidaPresupuestaria(null);
        return "";
    }

    //</editor-fold>    
//<editor-fold defaultstate="collapsed" desc="tab8: Estrategia de Ejecución-Cronograma">    
    private Date start;
    private Date end;

    public Date getStart() {
        return start;
    }

    public void setStart(Date start) {
        this.start = start;
    }

    public Date getEnd() {
        return end;
    }

    public void setEnd(Date end) {
        this.end = end;
    }

    public void onChange(TimelineModificationEvent e) {
        TimelineEvent event = e.getTimelineEvent();
        ((SvinObjetivoPrograma) event.getData()).setFechaInicio(event.getStartDate());
        ((SvinObjetivoPrograma) event.getData()).setFechaFin(event.getEndDate());
        modelActividades.update(event);

    }

    public void onChange2(TimelineModificationEvent e) {
        TimelineEvent event = e.getTimelineEvent();
        ((HitoProyecto) event.getData()).setFecha(event.getStartDate());
        modelHitos.update(event);
    }

    public void registraHitoProyecto() {
        /*for (SvinObjetivoPrograma comp : proyectoSelected.getComponentes()) {
         if (comp.getSvopId().equals(codComponenteSelected))
         {
         ((HitoProyecto) event.getData()).setComponenteEspecifico(comp);
         break;
         }
            
         }*/
        TimelineUpdater timelineUpdater = TimelineUpdater.getCurrentInstance(":formPrincipal:timelineHitos");
        ((HitoProyecto) event.getData()).setFecha(event.getStartDate());
        ((HitoProyecto) event.getData()).setComponenteEspecifico(objetivoProyectoSelected);
        modelHitos.update(event, timelineUpdater);
    }

    public void registraActividadProyecto() {
        TimelineUpdater timelineUpdater = TimelineUpdater.getCurrentInstance(":formPrincipal:timelineActividades");
        ((SvinObjetivoPrograma) event.getData()).setFechaInicio(event.getStartDate());
        ((SvinObjetivoPrograma) event.getData()).setFechaFin(event.getEndDate());
        modelActividades.update(event, timelineUpdater);
    }

    public void cancelarRegistroHitoProyecto() {
        HitoProyecto hitoProyecto = (HitoProyecto) event.getData();
        if (hitoProyecto.getId() == null) {
            proyectoSelected.removeHitoProyecto(hitoProyecto);
            modelHitos.delete(event);
        }
    }
    BigDecimal codComponenteSelected;

    public BigDecimal getCodComponenteSelected() {
        return codComponenteSelected;
    }

    public void setCodComponenteSelected(BigDecimal codComponenteSelected) {
        this.codComponenteSelected = codComponenteSelected;
    }

    public void cancelarP8(boolean resetearZoom) {
        controlGrabar = false;
        datosCompletos = false;
        proyectoSelected = proyectoFacade.find(proyectoSelected.getId());

        modelActividades = new TimelineModel();
        if (objetivoProyectoSelected != null) {
            for (SvinObjetivoPrograma obj1 : proyectoSelected.getObjetivoProyectoList()) {
                if (obj1.getSvopTipo().equals(SvinObjetivoPrograma.TIPO_PROPOSITO)) {
                    for (SvinObjetivoPrograma obj2 : obj1.getSvinObjetivoHijoList()) {
                        // create groups  
                        if (obj2.getSvopId().equals(objetivoProyectoSelected.getSvopId())) {
                            for (SvinObjetivoPrograma act : obj2.getSvinObjetivoHijoList()) {
                                //TimelineEvent event = new TimelineEvent(act.getSvopObjetivoProy(), act.getFechaInicio(), act.getFechaFin(), true, act.getSvopObjetivoProy(), act.getSvopObjetivoProy().toLowerCase());
                                TimelineGroup group = new TimelineGroup(act.getSvopId().toString(), act);
                                modelActividades.addGroup(group);

                                TimelineEvent event = new TimelineEvent(act, act.getFechaInicio(), act.getFechaFin(), true, act.getSvopId().toString());
                                modelActividades.add(event);
                            }
                        }
                    }
                }
            }
        }

        modelHitos = new TimelineModel();
        TimelineGroup group = new TimelineGroup("Hitos", "Hitos");
        modelHitos.addGroup(group);
        if (objetivoProyectoSelected != null) {
            for (HitoProyecto hito : proyectoSelected.getHitoProyectoList()) {
                if (hito.getComponenteEspecifico().getSvopId().equals(objetivoProyectoSelected.getSvopId())) {
                    TimelineEvent event = new TimelineEvent(hito, hito.getFecha(), null, true, "Hitos");
                    modelHitos.add(event);
                }
            }

        }

        if (resetearZoom) {
            start = new Date();
            Calendar cal1 = Calendar.getInstance();
            cal1.setTime(start);
            cal1.add(Calendar.DATE, -5);
            cal1.set(Calendar.HOUR_OF_DAY, 0);
            cal1.set(Calendar.MINUTE, 0);
            cal1.set(Calendar.SECOND, 0);
            start = cal1.getTime();

            end = new Date();
            Calendar cal2 = Calendar.getInstance();
            cal2.setTime(end);
            cal2.add(Calendar.DATE, 5);
            cal2.set(Calendar.HOUR_OF_DAY, 0);
            cal2.set(Calendar.MINUTE, 0);
            cal2.set(Calendar.SECOND, 0);
            end = cal2.getTime();
        }
    }

    public String registraP8() {
        try {
            proyectoFacade.edit(proyectoSelected);
            cancelarP8(false);
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Info", "La información se guardó exitosamente"));
        } catch (Exception e) {
            try {
                Throwable t = (Throwable) e;
                while (t.getCause() != null) {
                    t = t.getCause();
                }
                String msgError = "No fue posible grabar la información ingresada";
                FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", msgError));
            } catch (Exception e2) {
            }
        }
        return "";
    }

    private TimelineModel modelActividades;
    private TimelineModel modelHitos;
    private TimelineEvent event; // current event to be changed, edited, deleted or added  

    public TimelineEvent getEvent() {
        return event;
    }

    public void setEvent(TimelineEvent event) {
        this.event = event;
    }

    public void onEdit(TimelineModificationEvent e) {
        // get clone of the TimelineEvent to be edited  
        event = e.getTimelineEvent();
    }

    public void onAdd(TimelineAddEvent e) {
        Calendar cal1 = Calendar.getInstance();
        cal1.setTime(e.getStartDate());
        cal1.set(Calendar.HOUR_OF_DAY, 0);
        cal1.set(Calendar.MINUTE, 0);
        cal1.set(Calendar.SECOND, 0);

        HitoProyecto hitoProyecto = new HitoProyecto(proyectoSelected);
        hitoProyecto.setComponenteEspecifico(objetivoProyectoSelected);
        hitoProyecto.setFecha(cal1.getTime());
        proyectoSelected.addHitoProyecto(hitoProyecto);
        event = new TimelineEvent(hitoProyecto, hitoProyecto.getFecha(), null, true, "Hitos");
        modelHitos.add(event);
    }

    public void onDelete(TimelineModificationEvent e) {
        event = e.getTimelineEvent();
        proyectoSelected.removeHitoProyecto((HitoProyecto) event.getData());

    }

    public void onRangeChanged(TimelineRangeEvent e) {
        start = e.getStartDate();
        end = e.getEndDate();
    }

    public void delete() {
        TimelineUpdater timelineUpdater = TimelineUpdater.getCurrentInstance(":formPrincipal:timelineHitos");
        modelHitos.delete(event, timelineUpdater);
    }

    public TimelineModel getModelActividades() {
        return modelActividades;
    }

    public void setModelActividades(TimelineModel modelActividades) {
        this.modelActividades = modelActividades;
    }

    public TimelineModel getModelHitos() {
        return modelHitos;
    }

    public void setModelHitos(TimelineModel modelHitos) {
        this.modelHitos = modelHitos;
    }

//</editor-fold>         
//<editor-fold defaultstate="collapsed" desc="Tab9-Diagnóstico y Problemas">
    public String validarVaciosP9() {
        datosCompletos = true;
        System.out.println(proyectoSelected.getNroBeneficiariosIndirectosHombres());
        return "";
    }

    public void amountChanged(ValueChangeEvent event) {
        Double value = ((Double) ((UIOutput) event.getSource()).getValue());
        System.out.println("AMOUNT CHANGED: " + value);
    }

    //</editor-fold>
//<editor-fold defaultstate="collapsed" desc="Tab13-Viabilidad y Plan de Sostenibilidad">
    public String validarVaciosP13() {
        datosCompletos = true;
        if (proyectoSelected.getViabilidadTecnica() == null || proyectoSelected.getViabilidadTecnica().trim().isEmpty()
                || proyectoSelected.getPerderiaPais() == null || proyectoSelected.getPerderiaPais().trim().isEmpty()
                || proyectoSelected.getResultadosEsperados() == null || proyectoSelected.getResultadosEsperados().trim().isEmpty()
                || proyectoSelected.getImpactoAmbiental() == null || proyectoSelected.getImpactoAmbiental().trim().isEmpty()
                || proyectoSelected.getSostenibilidadSocial() == null || proyectoSelected.getSostenibilidadSocial().trim().isEmpty()) {
            datosCompletos = false;
        }
        return "";
    }

    //</editor-fold>
//<editor-fold defaultstate="collapsed" desc="Tab14-Detalle de adquisiciones del proyecto">
    public String registraP14() {
        try {
            if (adquisicionProyectoSelected.getId() == null) {
                adquisicionProyectoFacade.create(adquisicionProyectoSelected);
            } else {
                adquisicionProyectoFacade.edit(adquisicionProyectoSelected);
            }
            cancelarP14();
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Info", "La información se guardó exitosamente"));
            RequestContext.getCurrentInstance().update("formPrincipal:panel14");
        } catch (Exception e) {
            try {
                Throwable t = (Throwable) e;
                while (t.getCause() != null) {
                    t = t.getCause();
                }
                String msgError = "No fue posible grabar la información ingresada";
                if (t.getMessage().toUpperCase().contains("ORA-00001")) {
                    msgError = "Ya existe un registro para el tipo de adquisición seleccionado";
                    adquisicionProyectoList = adquisicionProyectoFacade.findByProyecto(proyectoSelected.getId());
                    RequestContext.getCurrentInstance().update("formPrincipal:dataTAdqusicion");
                }
                FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", msgError));
            } catch (Exception e2) {
            }
        }
        return "";
    }

    public boolean validarVaciosP14() {
        datosCompletos = true;
        if (adquisicionProyectoSelected.getTipoAdquisicion() == null || adquisicionProyectoSelected.getTipoAdquisicion().getPrdId() == null
                || adquisicionProyectoSelected.getPorcentajeImportado() == null
                || adquisicionProyectoSelected.getPorcentajeNacional() == null
                || adquisicionProyectoSelected.getDetalleInsumoImportado() == null || adquisicionProyectoSelected.getDetalleInsumoImportado().trim().isEmpty()
                || adquisicionProyectoSelected.getDetalleInsumoNacional() == null || adquisicionProyectoSelected.getDetalleInsumoNacional().trim().isEmpty()) {
            datosCompletos = false;
        }
        return datosCompletos;
    }

    public void eliminarP14() {
        try {
            adquisicionProyectoFacade.remove(adquisicionProyectoSelected);
            cancelarP14();
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Info", "El registro ha sido eliminado exitosamente"));
        } catch (Exception e) {
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", "No fue posible eliminar el registro seleccionado"));
        }
    }

    public void seleccionarTipoAdquisicion(ValueChangeEvent event) {
        Long seleccionado = (Long) event.getNewValue();
        for (SeaParametrosDet par : paramTipoAdquisicionProyectoList) {
            if (par.getPrdId().equals(seleccionado)) {
                adquisicionProyectoSelected.setTipoAdquisicion(par);
            }
        }
        //validarVaciosP14();
    }

    public void agregarP14(ActionEvent event) {
        adquisicionProyectoSelected = new AdquisicionProyecto(proyectoSelected);
        controlGrabar = true;
    }

    public void cancelarP14() {
        controlGrabar = false;
        datosCompletos = false;
        adquisicionProyectoList = adquisicionProyectoFacade.findByProyecto(proyectoSelected.getId());
    }

    //</editor-fold>
//<editor-fold defaultstate="collapsed" desc="Tab15-Matriz del Marco Lógico">
    public void eliminarP15() {
        try {
            objetivoProgramaFacade.remove(objetivoProyectoSelected);
            estadoExpandidoObjetivo.remove(objetivoProyectoSelected.getSvopId());
            cancelarP15(false);
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Info", "El registro ha sido eliminado exitosamente"));
        } catch (Exception e) {
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", "No fue posible eliminar el registro seleccionado"));
        }
    }

    public String agregarP15() {
        objetivoProyectoSelected = new SvinObjetivoPrograma(proyectoSelected);
        objetivoProyectoSelected.setSvopTipo(objetivoProyectoPadreSelected.getSvopTipo() + 1);
        objetivoProyectoSelected.setSvinObjetivoPadre(objetivoProyectoPadreSelected);
        objetivoProyectoSelected.setSvopOrden(objetivoProyectoPadreSelected.getSvinObjetivoHijoList().size() + 1);
        proyectoSelected.addObjetivoProyecto(objetivoProyectoSelected);
        if (objetivoProyectoSelected.getSvopTipo().equals(SvinObjetivoPrograma.TIPO_COMPONENTE)) {
            HitoProyecto hito = new HitoProyecto(proyectoSelected);
            hito.setComponenteEspecifico(objetivoProyectoSelected);
            hito.setFecha(proyectoSelected.getFechaInicio());
            hito.setDescripcion(objetivoProyectoSelected.getSvopObjetivoProy());
            proyectoSelected.addHitoProyecto(hito);
        }
        controlGrabar = true;
        return "";
    }

    public String registraP15() {
        try {
            //if (objetivoProyectoSelected.getSvopId() == null) {
            //objetivoProgramaFacade.create(objetivoProyectoSelected);
            //proyectoFacade.edit(proyectoSelected);
            //objetivoProyectoSelected.setearEstadoExpanded();
            //estadoExpandidoObjetivo.put(objetivoProyectoSelected.getSvopId(), objetivoProyectoSelected.isExpanded());
            //}
            proyectoFacade.edit(proyectoSelected);
            cancelarP15(true);
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Info", "La información se guardó exitosamente"));
        } catch (Exception e) {
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", "No fue posible grabar la información ingresada"));
        }
        return "";
    }

    public void cancelarP15(boolean setearEstadoExpansion) {
        controlGrabar = false;
        datosCompletos = false;
        proyectoSelected = proyectoFacade.find(proyectoSelected.getId());
        if (setearEstadoExpansion) {
            estadoExpandidoObjetivo = null;
            proyectoSelected.resetEstadoExpandidoObjetivo();
            estadoExpandidoObjetivo = proyectoSelected.getEstadoExpandidoObjetivo();
        } else {
            proyectoSelected.setEstadoExpandidoObjetivo(estadoExpandidoObjetivo);
        }
    }

    public void onRowToggleObjetivoProyecto(ToggleEvent event) {
        SvinObjetivoPrograma obj = (SvinObjetivoPrograma) event.getData();
        estadoExpandidoObjetivo.put(obj.getSvopId(), event.getVisibility() == Visibility.VISIBLE);
    }

    public SvinObjetivoPrograma getObjetivoProyectoPadreSelected() {
        return objetivoProyectoPadreSelected;
    }

    public void setObjetivoProyectoPadreSelected(SvinObjetivoPrograma objetivoProyectoPadreSelected) {
        this.objetivoProyectoPadreSelected = objetivoProyectoPadreSelected;
    }

    private Map<BigDecimal, Boolean> estadoExpandidoObjetivo = new HashMap<BigDecimal, Boolean>();
    private Map<BigDecimal, Boolean> estadoExpandidoObjetivoBVivir = new HashMap<BigDecimal, Boolean>();

    public String cambiarOrdenActividad(Integer cambio) {
        try {
            objetivoProyectoSelected.cambiarOrdenObjetivo(cambio);
            objetivoProgramaFacade.edit(objetivoProyectoSelected.getSvinObjetivoPadre());
            cancelarP15(false);
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Info", "La información se guardó exitosamente"));
        } catch (Exception e) {
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", "No fue posible grabar la información ingresada"));
        }

        return "";
    }

    //</editor-fold>    
//<editor-fold defaultstate="collapsed" desc="Tab16: Alineamiento del Proyecto-Objetivos PLNBV">
    public void agregarP16(ActionEvent event) {
        objBVivirPadre = null;
        objetivoBVivirSelected = new SvinProgObj(proyectoSelected);
        controlGrabar = true;
    }

    public void cancelarP16(boolean setearBotones, boolean setearExpanded) {
        proyectoSelected = proyectoFacade.find(proyectoSelected.getId());
        proyectoSelected.setearObjetivoBVivirProyectoPadreList();
        if (setearBotones) {
            objBVivirPadre = null;
            datosCompletos = false;
            controlGrabar = false;
        }
        if (setearExpanded) {
            proyectoSelected.setEstadoExpandidoObjetivoBVivir(new HashMap<BigDecimal, Boolean>());
            estadoExpandidoObjetivoBVivir = proyectoSelected.getEstadoExpandidoObjetivoBVivir();
        } else {
            proyectoSelected.setEstadoExpandidoObjetivoBVivir(estadoExpandidoObjetivoBVivir);
        }
    }

    public String registraP16() {
        try {
            proyectoSelected.addObjetivoBVivir(objetivoBVivirSelected);
            proyectoFacade.edit(proyectoSelected);
            estadoExpandidoObjetivoBVivir = proyectoSelected.getEstadoExpandidoObjetivoBVivir();
            cancelarP16(true, false);
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Info", "La información se guardó exitosamente"));
        } catch (Exception e) {
            try {
                cancelarP16(false, false);
                Throwable t = (Throwable) e;
                while (t.getCause() != null) {
                    t = t.getCause();
                }
                String msgError = "No fue posible grabar la información ingresada";
                String controlMsgError = null;
                if (t.getMessage() != null && t.getMessage().toUpperCase().contains("ORA-00001")) {
                    msgError = "Ya existe un registro para el Objetivo seleccionado";
                    controlMsgError = "formPrincipal:subojPlan1";
                }
                FacesContext.getCurrentInstance().addMessage(controlMsgError, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", msgError));
            } catch (Exception e2) {
            }
        }
        return "";
    }

    public void onRowToggleObjetivoBVivir(ToggleEvent event) {
        SvinProgObj subObj = (SvinProgObj) event.getData();
        //proyectoSelected.addEstadoExpandidoObjetivoBVivir(subObj.getObjetivoBVivir().getSvobviId(), event.getVisibility() == Visibility.VISIBLE);
        estadoExpandidoObjetivoBVivir.put(subObj.getObjetivoBVivir().getSvobviId(), event.getVisibility() == Visibility.VISIBLE);
        /*if (event.getVisibility() == Visibility.VISIBLE) {
         subObj.setExpanded(true);
         } else {
         subObj.setExpanded(false);
         }*/
    }

    public void eliminarP16() {
        try {
            proyectoSelected.removeObjetivoBVivir(objetivoBVivirSelected);
            proyectoFacade.edit(proyectoSelected);
            estadoExpandidoObjetivoBVivir = proyectoSelected.getEstadoExpandidoObjetivoBVivir();
            cancelarP16(true, false);
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Info", "El registro ha sido eliminado exitosamente"));
        } catch (Exception e) {
            cancelarP16(true, false);
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", "No fue posible eliminar el registro seleccionado"));
        }
    }

    public void bsqSubObjetivos() {
        if (objBVivirPadre != null) {
            objBVivirHijoList = svinObjBVivirFacade.findObjXPadre(objBVivirPadre.getSvobviId());
        } else {
            objBVivirHijoList = new ArrayList<>();
        }
        //objetivoBVivirSelected.setObjetivoBVivir(null);
    }

    //</editor-fold> 
//<editor-fold defaultstate="collapsed" desc="tab17: Alineamiento del Proyecto-Objetivos Estratégicos Institucionales">
    public void agregarP17(ActionEvent event) {
        objetivoEstrategicoProyectoSelected = new SvinProgObjEstrategicos(proyectoSelected);
        controlGrabar = true;
    }

    public String registraP17() {
        try {
            proyectoSelected.addObjetivoEstrategico(objetivoEstrategicoProyectoSelected);
            proyectoFacade.edit(proyectoSelected);
            cancelarP17(true);
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Info", "La información se guardó exitosamente"));
        } catch (Exception e) {
            try {
                cancelarP17(false);
                Throwable t = (Throwable) e;
                while (t.getCause() != null) {
                    t = t.getCause();
                }
                String msgError = "No fue posible grabar la información ingresada";
                String controlMsgError = null;
                if (t.getMessage().toUpperCase().contains("ORA-00001")) {
                    msgError = "Ya existe un registro para el Objetivo seleccionado";
                    controlMsgError = "formPrincipal:estInt";
                }
                FacesContext.getCurrentInstance().addMessage(controlMsgError, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", msgError));
            } catch (Exception e2) {
            }
        }
        return "";
    }

    public void cancelarP17(boolean setearBotones) {
        proyectoSelected = proyectoFacade.find(proyectoSelected.getId());
        if (setearBotones) {
            datosCompletos = false;
            controlGrabar = false;
            perspectivaSelected = new SvinObjetivosEstraInsti();
            objetivoEstrategicoSelected = new SvinObjetivosEstraInsti();
            indicadorSelected = new SvinObjetivosEstraInsti();
            objetivoEstrategicoProyectoSelected = new SvinProgObjEstrategicos(proyectoSelected);
        }
    }

    public void eliminarP17() {
        try {
            proyectoSelected.removeObjetivoEstrategico(objetivoEstrategicoProyectoSelected);
            proyectoFacade.edit(proyectoSelected);
            cancelarP17(true);
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Info", "El registro ha sido eliminado exitosamente"));
        } catch (Exception e) {
            cancelarP17(false);
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", "No fue posible eliminar el registro seleccionado"));
        }
    }

    public String seleccionarPerspectiva() {
        objetivoEstrategicoSelected = null;
        indicadorSelected = null;
        objetivoEstrategicoProyectoSelected.setObjetivoEstrategico(null);
        return "";
    }

    public String seleccionarObjetivoEstrategico() {
        indicadorSelected = null;
        objetivoEstrategicoProyectoSelected.setObjetivoEstrategico(null);
        return "";
    }

    public String seleccionarIndicador() {
        objetivoEstrategicoProyectoSelected.setObjetivoEstrategico(null);
        return "";
    }

//</editor-fold>     
//<editor-fold defaultstate="collapsed" desc="tab18: Alineamiento del Proyecto-Objetivos Provinciales, Cantonales o Paroquiales">    
    public String editarP18() {
        controlGrabar = true;
        return "";
    }

    public String registraP18() {
        try {
            proyectoFacade.edit(proyectoSelected);
            cancelarP18();
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Info", "La información se guardó exitosamente"));
        } catch (Exception e) {
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", "No fue posible grabar la información ingresada"));
        }
        return "";
    }

    public String cancelarP18() {
        proyectoSelected = proyectoFacade.find(proyectoSelected.getId());
        controlGrabar = false;
        return "";
    }

    //</editor-fold>     
//<editor-fold defaultstate="collapsed" desc="Metodos generales">
    public String agregarProyecto() {
        proyectoSelected = new Proyecto();
        proyectoSelected.setConvocatoria(convocatoriaFacade.findByEstadoAbierto());
        if (proyectoSelected.getConvocatoria() == null) {
            FacesContext.getCurrentInstance().addMessage("formPrincipal:btnAgregarProyecto", new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", "No existe una convocatoria abierta a la fecha actual. Por favor, previamente debe crear una convocatoria."));
            return "";
        } else {
            botonInicio = false;

            docenteSelected = new SegUsuario();
            nomDocenteBusqueda = "";
            tipoPoblacionSelectedList = new ArrayList<>();
            controlGrabar = true;
            crearArbolMenu(Proyecto.ESTADO_CREADO);
            return "proyecto";
        }
    }

    public String inicioProgramas() {
        proyectoSelected = new Proyecto();
        docenteSelected = new SegUsuario();
        nomDocenteBusqueda = "";

        if (botonInicio) {
            init();
        } else {
        }
        return "";
    }

    public SvinProgramaV getProgramaSelected() {
        return programaSelected;
    }

    public void setProgramaSelected(SvinProgramaV programaSelected) {
        this.programaSelected = programaSelected;
    }

    public String seleccionarProyecto() {
        botonInicio = false;
        indiceTabActivo = 0;
        indiceTabActivoEjecucion = 0;
        if (proyectoSelected.getResponsableList() != null && !proyectoSelected.getResponsableList().isEmpty()) {
            llenarDatosDocenteXUsuId(proyectoSelected.getResponsableList().get(0).getUsuario().getUsuId());
        }
        tipoPoblacionSelectedList = new ArrayList<>();
        for (TipoPoblacionProyecto tipoPoblacionProyecto : proyectoSelected.getTipoPoblacionList()) {
            tipoPoblacionSelectedList.add(tipoPoblacionProyecto.getTipoPoblacion());
        }
        //crearArbolMenu();
        return "proyecto";
    }

    public String seleccionarEdicion() {
        controlGrabar = true;
        datosCompletos = false;
        return "";
    }

    public void cambiarTabPerfil(TabChangeEvent e) {
        try {
            datosCompletos = false;
            if (e.getTab() != null) {
                String[] aux = e.getTab().getClientId().split(":");
                if (aux[aux.length - 1].equals("tabP1")) {//tab1: Datos Generales
                    cancelarP1();
                } else if (aux[aux.length - 1].equals("tabP2")) {//tab2: Origen de los fondos
                    cancelarP1();
                } else if (aux[aux.length - 1].equals("tabP3")) {//tab3: Cobertura y Localización
                    cancelarP3();
                } else if (aux[aux.length - 1].equals("tabP4")) {//tab4: Detalle de entregables del proyecto
                    cancelarP1();
                } else if (aux[aux.length - 1].equals("tabP5")) {//tab5: Docentes participantes
                    cancelarP5();
                } else if (aux[aux.length - 1].equals("tabP6")) {//tab6: Estudiantes participantes
                    cancelarP6();
                } else if (aux[aux.length - 1].equals("tabP7")) {//tab7: Presupuesto Detallado y Fuentes de Financiamiento
                    cancelarP7(true);
                    RequestContext context = RequestContext.getCurrentInstance();
                    //context.scrollTo("formPrincipal:btnAgregarP7");
                } else if (aux[aux.length - 1].equals("tabP8")) {//tab8: Estrategia de Ejecución-Cronograma
                    objetivoProyectoSelected = null;
                    cancelarP8(true);
                } else if (aux[aux.length - 1].equals("tabP9")) {//tab9: Diagnóstico y Problema
                    cancelarP1();
                } else if (aux[aux.length - 1].equals("tabP10")) {//tab10: Diagnóstico y Problema-Identificación de Población
                    cancelarP1();
                } else if (aux[aux.length - 1].equals("tabP13")) {//tab13: Viabilidad y Plan de Sostenibilidad
                    cancelarP1();
                } else if (aux[aux.length - 1].equals("tabP14")) {//tab14: Detalle de adquisiciones del proyecto
                    cancelarP14();
                } else if (aux[aux.length - 1].equals("tabP15")) {//tab15: Matriz del Marco Lógico
                    cancelarP15(true);
                } else if (aux[aux.length - 1].equals("tabP16")) {//tab16: Alineamiento del Proyecto-Objetivos PLNBV
                    cancelarP16(true, true);
                } else if (aux[aux.length - 1].equals("tabP17")) {//tab17: Alineamiento del Proyecto-Objetivos Estratégicos Institucionales
                    cancelarP17(true);
                } else if (aux[aux.length - 1].equals("tabP18")) {//tab18: 
                    cancelarP18();
                }

            }
        } catch (Exception ex) {
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", ex.getMessage()));
        }

    }
//</editor-fold>

    public void subirDocAprobacionConcejoDep(FileUploadEvent event) {
        try {
            String carpetaAdjuntos = "documentos_adjuntos" + separatorChar + "aprobacion_concejo_departamento";
            ServletContext servletContext = (ServletContext) FacesContext.getCurrentInstance().getExternalContext().getContext();
            String path = servletContext.getRealPath("") + separatorChar + carpetaAdjuntos + separatorChar + proyectoSelected.getId();
            if (!Files.isDirectory(Paths.get(path))) {
                Files.createDirectories(Paths.get(path));
            }
            path = path + separatorChar + event.getFile().getFileName();
            Files.copy(event.getFile().getInputstream(), Paths.get(path), StandardCopyOption.REPLACE_EXISTING);
            proyectoSelected.setNombreDocAprobacionConcejoDep(event.getFile().getFileName());
            proyectoSelected.setUrlDocAprobacionConcejoDep("/" + carpetaAdjuntos.replace("\\", "/") + "/" + proyectoSelected.getId() + "/");
        } catch (Exception e) {
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", "No fue posible cargar el archivo seleccionado"));
        }

    }

    public String registraP11() {
        try {
            proyectoFacade.edit(proyectoSelected);
            proyectoSelected = proyectoFacade.find(proyectoSelected.getId());
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Info", "La información se guardó exitosamente"));
        } catch (Exception e) {
            try {
                Throwable t = (Throwable) e;
                while (t.getCause() != null) {
                    t = t.getCause();
                }
                String msgError = "No fue posible grabar la información ingresada";
                FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", msgError));
            } catch (Exception e2) {
            }
        }
        return "";
    }

    public void cancelarP11() {
        proyectoSelected = proyectoFacade.find(proyectoSelected.getId());
    }

    public void abrirBusquedaEstudiante() {
        Map<String, Object> options = new HashMap<>();
        options.put("resizable", false);
        options.put("draggable", false);
        options.put("modal", true);
        RequestContext.getCurrentInstance().openDialog("busquedaEstudiante", options, null);
    }

    public int getIndiceTabActivoEjecucion() {
        return indiceTabActivoEjecucion;
    }

    public void setIndiceTabActivoEjecucion(int indiceTabActivoEjecucion) {
        this.indiceTabActivoEjecucion = indiceTabActivoEjecucion;
    }

    public void cambiarTabEjecucion(TabChangeEvent e) {
        try {
            datosCompletos = false;
            if (e.getTab() != null) {
                String[] aux = e.getTab().getClientId().split(":");
                if (aux[aux.length - 1].equals("tabP2_1")) {//tab1: 
                    cancelarP1();
                }
            }
        } catch (Exception ex) {
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", ex.getMessage()));
        }

    }

    public void abrirBusquedaDocente(ActionEvent event) {
        Map<String, Object> options = new HashMap<>();
        options.put("resizable", true);
        options.put("draggable", true);
        options.put("modal", true);
        options.put("contentHeight", 380);
        //options.put("closeOnEscape", true); 
        options.put("includeViewParams", true);

        Map<String, List<String>> params = new HashMap<String, List<String>>();
        List<String> values = new ArrayList<String>();
        values.add(proyectoSelected.getId().toString());
        params.put("idProyecto", values);
        RequestContext.getCurrentInstance().openDialog("busquedaDocente", options, params);
    }

    public void seleccionarDocente(SelectEvent event) {
        try {
            VDocenteVinculacion2 docente = (VDocenteVinculacion2) event.getObject();
            SvinResponsableProg resp = new SvinResponsableProg();
            resp.setProyecto(proyectoSelected);
            resp.setDepartamento(docente.getDepartamento());
            resp.setUsuario(docente.getUsuario());
            resp.setTipoResponsable(new TipoResponsable(TipoResponsable.TIPO_PARTICIPANTE));
            proyectoSelected.addResponsable(resp);
            proyectoFacade.edit(proyectoSelected);
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Info", "La información se guardó exitosamente"));
        } catch (Exception e) {
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", "No fue posible grabar la información ingresada"));
        }
    }

    public void eliminarDocentesParticipantes() {
        try {
            boolean encontro = false;
            for (Iterator<SvinResponsableProg> iterator = proyectoSelected.getResponsableList().iterator(); iterator.hasNext();) {
                SvinResponsableProg resp = iterator.next();
                if (resp.isSelected()) {
                    iterator.remove();
                    encontro = true;
                }
            }
            if (encontro) {
                proyectoFacade.edit(proyectoSelected);
                FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Info", "Los docentes seleccionados fueron eliminados exitosamente"));
            } else {
                FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", "Debe seleccionar el/los items a eliminar."));
            }

        } catch (Exception e) {
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", "No fue posible eliminar los registros seleccionados"));
        }
    }

    public String seleccionarTodosEliminar() {
        for (SvinResponsableProg resp : proyectoSelected.getParticipanteList()) {
            resp.setSelected(seleccionadoTodos);
        }
        return "";
    }

    public String seleccionarEliminar() {
        boolean seleccionadoTodos = true;
        for (SvinResponsableProg resp : proyectoSelected.getParticipanteList()) {
            if (!resp.isSelected()) {
                seleccionadoTodos = false;
                break;
            }
        }
        this.seleccionadoTodos = seleccionadoTodos;
        return "";
    }
    private boolean seleccionadoTodos;

    public boolean isSeleccionadoTodos() {
        return seleccionadoTodos;
    }

    public void setSeleccionadoTodos(boolean seleccionadoTodos) {
        this.seleccionadoTodos = seleccionadoTodos;
    }

    public boolean getSeleccionadoAlguno() {
        for (SvinResponsableProg resp : proyectoSelected.getParticipanteList()) {
            if (resp.isSelected()) {
                return true;
            }
        }
        return false;
    }

    private TreeNode rootMenu;

    public TreeNode getRootMenu() {
        return rootMenu;
    }

    public void setRootMenu(TreeNode rootMenu) {
        this.rootMenu = rootMenu;
    }

    public void crearArbolMenu(String estadoProyecto) {
        rootMenu = new DefaultTreeNode("Root", null);
        TreeNode node1 = new DefaultTreeNode(new OpcionMenu("1", "Perfil"), rootMenu);
        TreeNode node11 = new DefaultTreeNode(new OpcionMenu("1.1", "1. Datos Generales"), node1);
        TreeNode node111 = new DefaultTreeNode(new OpcionMenu("1.1.1", "1.1. Datos Generales"), node11);
        if (estadoProyecto.equals(Proyecto.ESTADO_CREADO)){
            node1.setExpanded(true);
            node11.setExpanded(true);
            node111.setExpanded(true);
            node111.setSelected(true);
        }
        if (proyectoSelected.getId() != null) {
            TreeNode node112 = new DefaultTreeNode(new OpcionMenu("1.1.2", "1.2. Cobertura y Localización"), node11);
            TreeNode node113 = new DefaultTreeNode(new OpcionMenu("1.1.3", "1.3. Origen de los fondos"), node11);
            TreeNode node114 = new DefaultTreeNode(new OpcionMenu("1.1.4", "1.4. Detalle de entregables del proyecto"), node11);
            TreeNode node12 = new DefaultTreeNode(new OpcionMenu("1.2", "2. Diagnostico y Problema"), node1);
            TreeNode node121 = new DefaultTreeNode(new OpcionMenu("1.2.1", "2.1. Diagnostico y Problema"), node12);
            TreeNode node122 = new DefaultTreeNode(new OpcionMenu("1.2.2", "2.2. Identificación de Población"), node12);
            TreeNode node123 = new DefaultTreeNode(new OpcionMenu("1.2.3", "2.3. Docentes Participantes"), node12);
            TreeNode node124 = new DefaultTreeNode(new OpcionMenu("1.2.4", "2.4. Estudiantes Participantes"), node12);
            TreeNode node13 = new DefaultTreeNode(new OpcionMenu("1.3", "3. Alineamiento del Proyecto"), node1);
            TreeNode node131 = new DefaultTreeNode(new OpcionMenu("1.3.1", "3.1. Objetivos PLNBV"), node13);
            TreeNode node133 = new DefaultTreeNode(new OpcionMenu("1.3.3", "3.2. Objetivos Provinciales, Cantonales o Paroquiales"), node13);
            TreeNode node132 = new DefaultTreeNode(new OpcionMenu("1.3.2", "3.3. Objetivos Estratégicos Institucionales"), node13);
            TreeNode node134 = new DefaultTreeNode(new OpcionMenu("1.4", "3.4. Matriz del Marco Lógico"), node13);
            TreeNode node15 = new DefaultTreeNode(new OpcionMenu("1.5", "4. Viabilidad y Plan de Sostenibilidad"), node1);
            TreeNode node16 = new DefaultTreeNode(new OpcionMenu("1.6", "5. Presupuesto Detallado y Fuentes de Financiamiento"), node1);
            TreeNode node17 = new DefaultTreeNode(new OpcionMenu("1.7", "6. Estrategia de Ejecución-Cronograma"), node1);
            TreeNode node18 = new DefaultTreeNode(new OpcionMenu("1.8", "7. Acta de Consejo de Departamento"), node1);

            TreeNode node2 = new DefaultTreeNode(new OpcionMenu("2", "Calificación"), rootMenu);
            TreeNode node21 = new DefaultTreeNode(new OpcionMenu("2.1", "1. Asignación de Comisión de Calificación"), node2);
            TreeNode node22 = new DefaultTreeNode(new OpcionMenu("2.2", "2. Registro Calificación"), node2);
            if (estadoProyecto.equals(Proyecto.ESTADO_APROBADO1)){
                node2.setExpanded(true);
                node22.setSelected(true);
            }
            if (!proyectoSelected.getEstado().equals(Proyecto.ESTADO_CREADO)
                    && !proyectoSelected.getEstado().equals(Proyecto.ESTADO_RECHAZADO1)
                    && !proyectoSelected.getEstado().equals(Proyecto.ESTADO_RECHAZADO2)) {
                TreeNode node3 = new DefaultTreeNode(new OpcionMenu("3", "Ejecución"), rootMenu);
                TreeNode node31 = new DefaultTreeNode(new OpcionMenu("3.1", "1. Asignación de Docentes"), node3);
                TreeNode node32 = new DefaultTreeNode(new OpcionMenu("3.2", "2. Asignación de Estudiantes"), node3);
                TreeNode node33 = new DefaultTreeNode(new OpcionMenu("3.3", "3. Informes de avance"), node3);

                TreeNode node4 = new DefaultTreeNode(new OpcionMenu("4", "Seguimiento"), rootMenu);
                TreeNode node5 = new DefaultTreeNode(new OpcionMenu("5", "Evaluación"), rootMenu);
                TreeNode node6 = new DefaultTreeNode(new OpcionMenu("6", "Cierre"), rootMenu);

            }
        }
    }

    public void onNodeSelect(NodeSelectEvent event) {
        /*FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_INFO, "Selected", event.getTreeNode().toString());
         FacesContext.getCurrentInstance().addMessage(null, message);*/
        OpcionMenu opcionMenu = (OpcionMenu) selectedNode.getData();
        switch (opcionMenu.getCodigo()) {
            case "1.1.1":
                cancelarP1();
                break;
            case "1.1.2":
                cancelarP3();
                break;
            case "1.1.3":
                cancelarP1();
                break;
            case "1.1.4":
                cancelarP1();
                break;
            case "1.2.1":
                cancelarP1();
                break;
            case "1.2.2":
                cancelarP1();
                break;
            case "1.2.3":
                cancelarP5();
                break;
            case "1.2.4":
                cancelarP6();
                break;
            case "1.3.1":
                cancelarP16(true, true);
                break;
            case "1.3.2":
                cancelarP17(true);
                break;
            case "1.3.3":
                cancelarP18();
                break;
            case "1.4":
                cancelarP15(true);
                break;
            case "1.5":
                cancelarP1();
                break;
            case "1.6":
                cancelarP7(true);
                break;
            case "1.7":
                objetivoProyectoSelected = null;
                cancelarP8(true);
                break;
            case "1.8":
                cancelarP11();
                break;
            case "2.2"://Calificacion
                initCalificacion();
                break;
            case "2.3":
                inicioAvance();
                proyectoSelected = proyectoFacade.find(proyectoSelected.getId());
                break;
            default:
                selectedNode.setExpanded(true);
                opcionMenu.setExpanded(true);
        }

    }

    public void onNodeExpand(NodeExpandEvent event) {
        OpcionMenu opcionMenu = (OpcionMenu) event.getTreeNode();
        opcionMenu.setExpanded(event.getTreeNode().isExpanded());
    }
    public void onNodeCollapse(NodeCollapseEvent event) {
        OpcionMenu opcionMenu = (OpcionMenu) event.getTreeNode();
        opcionMenu.setExpanded(event.getTreeNode().isExpanded());

    }

    private TreeNode selectedNode;

    public TreeNode getSelectedNode() {
        return selectedNode;
    }

    public void setSelectedNode(TreeNode selectedNode) {
        this.selectedNode = selectedNode;
    }

    public String getSelectedNodeCode() {
        if (selectedNode != null) {
            return ((OpcionMenu) selectedNode.getData()).getCodigo();
        } else {
            return "";
        }
    }

    public void onRowToggleOpcionMenu(ToggleEvent event) {
        /*OpcionMenu opcionMenu = (OpcionMenu) event.getData();
         estadoExpandidoObjetivoBVivir.put(subObj.getObjetivoBVivir().getSvobviId(), event.getVisibility() == Visibility.VISIBLE);*/
    }

    private boolean modoEdicion;

    public boolean isModoEdicion() {
        return modoEdicion;
    }

    public void setModoEdicion(boolean modoEdicion) {
        this.modoEdicion = modoEdicion;
    }

    private AvanceComponente avanceComponenteSelected;

    public AvanceComponente getAvanceComponenteSelected() {
        return avanceComponenteSelected;
    }

    public void setAvanceComponenteSelected(AvanceComponente avanceComponenteSelected) {
        this.avanceComponenteSelected = avanceComponenteSelected;
    }

    public void agregarAvance(ActionEvent event) {
        avanceComponenteSelected = new AvanceComponente();
        avanceComponenteSelected.setComponenteEspecifico(objetivoProyectoSelected);
        avanceComponenteSelected.setFecha(new Date());
        for (SvinObjetivoPrograma actividad : objetivoProyectoSelected.getSvinObjetivoHijoList()) {
            AvanceActividad seguimientoActividad = new AvanceActividad();
            seguimientoActividad.setAvanceComponente(avanceComponenteSelected);
            seguimientoActividad.setActividad(actividad);
            if (objetivoProyectoSelected.getSeguimientoProyectoActual().getAvanceActividadList() != null) {
                for (AvanceActividad seg : objetivoProyectoSelected.getSeguimientoProyectoActual().getAvanceActividadList()) {
                    if (seg.getActividad().getSvopId().equals(actividad.getSvopId())) {
                        seguimientoActividad.setPorcentajeAvance(seg.getPorcentajeAvance());
                        break;
                    }
                }
            }
            avanceComponenteSelected.addSeguimientoActividad(seguimientoActividad);
        }

    }

    public void cancelarAvance() {
        avanceComponenteSelected = null;
    }

    private void inicioAvance() {
        objetivoProyectoSelected = null;
        avanceComponenteSelected = null;
    }

    public String registrarAvance() {
        try {
            if (avanceComponenteSelected.getId() == null) {
                objetivoProyectoSelected.addSeguimientoProyecto(avanceComponenteSelected);
            }
            //proyectoSelected.addSeguimientoProyecto(avanceComponenteSelected);
            proyectoFacade.edit(proyectoSelected);
            cancelarAvance();
            proyectoSelected = proyectoFacade.find(proyectoSelected.getId());
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Info", "La información se guardó exitosamente"));
        } catch (Exception e) {
            try {
                Throwable t = (Throwable) e;
                while (t.getCause() != null) {
                    t = t.getCause();
                }
                String msgError = "No fue posible grabar la información ingresada";
                String controlMsgError = null;
                if (t.getMessage().toUpperCase().contains("ORA-00001")) {
                    msgError = "Ya existe un registro para el componente y la fecha seleccionados";
                }
                controlMsgError = "formPrincipal:txtFechaAvance_input";
                FacesContext.getCurrentInstance().addMessage(controlMsgError, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", msgError));
                if (avanceComponenteSelected.getId() == null) {
                    objetivoProyectoSelected.removeSeguimientoProyecto(avanceComponenteSelected);
                }
            } catch (Exception e2) {
            }
        }
        return "";
    }

    public void eliminarAvance() {
        try {
            objetivoProyectoSelected.removeSeguimientoProyecto(avanceComponenteSelected);
            //proyectoSelected.removeSeguimientoProyecto(avanceComponenteSelected);
            proyectoFacade.edit(proyectoSelected);
            cancelarAvance();
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Info", "El registro ha sido eliminado exitosamente"));
        } catch (Exception e) {
            cancelarAvance();
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", "No fue posible eliminar el registro seleccionado"));
        }
    }

    private List<AvanceComponente> seguimientoProyectoList;

    public List<AvanceComponente> getSeguimientoProyectoList() {
        return seguimientoProyectoList;
    }

    public void setSeguimientoProyectoList(List<AvanceComponente> seguimientoProyectoList) {
        this.seguimientoProyectoList = seguimientoProyectoList;
    }

    public void nuevoCalificacion(ActionEvent event) {
        calificacionProyectoSelected = new CalificacionProyecto();
        CalificacionProyecto calificacionProyectoActual = proyectoSelected.getCalificacionActual();
        if (calificacionProyectoActual != null) {
            for (DetalleCalificacionProyecto detalleCalificacionProyecto : calificacionProyectoActual.getDetalleCalificacionList()) {
                DetalleCalificacionProyecto det = new DetalleCalificacionProyecto();
                det.setParametroEvaluacion(detalleCalificacionProyecto.getParametroEvaluacion());
                //det.setPuntaje(detalleCalificacionProyecto.getValoracionParametroEvaluacion().getPuntaje());
                det.setValoracionParametroEvaluacion(detalleCalificacionProyecto.getValoracionParametroEvaluacion());
                det.setCalificacionProyecto(detalleCalificacionProyecto.getCalificacionProyecto());
                calificacionProyectoSelected.addDetalleCalificacion(det);
            }
        } else {
            for (ParametroEvaluacion parametroEvaluacion : parametroEvaluacionFacade.findAll()) {
                DetalleCalificacionProyecto det = new DetalleCalificacionProyecto();
                det.setParametroEvaluacion(parametroEvaluacion);
                calificacionProyectoSelected.addDetalleCalificacion(det);
            }
        }
    }

    public CalificacionProyecto getCalificacionProyectoSelected() {
        return calificacionProyectoSelected;
    }

    public void setCalificacionProyectoSelected(CalificacionProyecto calificacionProyectoSelected) {
        this.calificacionProyectoSelected = calificacionProyectoSelected;
    }

    public String grabarCalificacion() {
        try {
            if (calificacionProyectoSelected.getId() == null) {
                proyectoSelected.addCalificacion(calificacionProyectoSelected);
            }
            proyectoFacade.edit(proyectoSelected);
            cancelarEdicionCalificacion(true);
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Info", "La información se guardó exitosamente"));
        } catch (Exception e) {
            try {
                Throwable t = (Throwable) e;
                while (t.getCause() != null) {
                    t = t.getCause();
                }
                String msgError = "No fue posible grabar la información ingresada";
                FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", msgError));
                cancelarEdicionCalificacion(false);
            } catch (Exception e2) {
            }
        }
        return "";
    }

    public void initCalificacion() {
        expandedCalificacionProyecto.clear();
        cancelarEdicionCalificacion(true);
        for (CalificacionProyecto calificacionProyecto : proyectoSelected.getCalificacionList()) {
            expandedCalificacionProyecto.put(calificacionProyecto.getId(), calificacionProyecto.isExpanded());
        }
    }

    public void cancelarEdicionCalificacion(boolean ocultarPanelEdicion) {
        if (ocultarPanelEdicion) {
            calificacionProyectoSelected = null;
        }
        proyectoSelected = proyectoFacade.find(proyectoSelected.getId());
        setExpandedCalificacionProyecto();
    }

    private Map<Integer, Boolean> expandedCalificacionProyecto = new HashMap<Integer, Boolean>();

    public Map<Integer, Boolean> getExpandedCalificacionProyecto() {
        return expandedCalificacionProyecto;
    }

    public void setExpandedCalificacionProyecto(Map<Integer, Boolean> expandedCalificacionProyecto) {
        this.expandedCalificacionProyecto = expandedCalificacionProyecto;
    }

    public void onRowToggleCalificacionProyecto(ToggleEvent event) {
        CalificacionProyecto calificacionProyecto = (CalificacionProyecto) event.getData();
        expandedCalificacionProyecto.put(calificacionProyecto.getId(), event.getVisibility() == Visibility.VISIBLE);
    }

    public void onRowToggle(ToggleEvent event) {
        if (event.getData() instanceof CalificacionProyecto) {
            CalificacionProyecto calificacionProyecto = (CalificacionProyecto) event.getData();
            expandedCalificacionProyecto.put(calificacionProyecto.getId(), event.getVisibility() == Visibility.VISIBLE);
        }
    }

    private void setExpandedCalificacionProyecto() {
        for (CalificacionProyecto calificacionProyecto : proyectoSelected.getCalificacionList()) {
            Boolean expanded = (expandedCalificacionProyecto.get(calificacionProyecto.getId()) != null) ? expandedCalificacionProyecto.get(calificacionProyecto.getId()) : false;
            calificacionProyecto.setExpanded(expanded);
        }
    }

    public String aaa() {
        return "";
    }

    public void finalizarCalificacion(ActionEvent event) {
        try {
            if (proyectoSelected.getCalificacionActual().getResultado().equals("APROBADO")) {
                proyectoSelected.setEstado(Proyecto.ESTADO_APROBADO1);
            } else {
                proyectoSelected.setEstado(Proyecto.ESTADO_RECHAZADO1);
            }
            proyectoFacade.edit(proyectoSelected);
            cancelarEdicionCalificacion(true);
            crearArbolMenu(proyectoSelected.ESTADO_APROBADO1);
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Info", "La información se guardó exitosamente"));
        } catch (Exception e) {
            try {
                Throwable t = (Throwable) e;
                while (t.getCause() != null) {
                    t = t.getCause();
                }
                String msgError = "No fue posible grabar la información ingresada";
                FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", msgError));
            } catch (Exception e2) {
            }
        } finally {
            cancelarEdicionCalificacion(true);
        }

    }

}
